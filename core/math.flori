
import "core/prelude"

fn or(a Int, b Int) Int $[importc "|", header nodeclc, patternc infixc, importjs "|", patternjs infixjs]
fn and(a Int, b Int) Int $[importc "&", header nodeclc, patternc infixc, importjs "&", patternjs infixjs]

fn xor(a Int, b Int) Int $[importc "^", header nodeclc, patternc infixc, importjs "^", patternjs infixjs]
fn xor(a UInt32, b UInt32) UInt32 $[importc "^", header nodeclc, patternc infixc, importjs "^", patternjs infixjs]

fn `%(a Int, b Int) Int $[importc "%", header nodeclc, patternc infixc, importjs "%", patternjs infixjs]

fn M_PI() Float $[importc, header "math.h", patternc "M_PI", importjs, patternjs "Math.PI"]
M_PI := M_PI()

fn neg(x Int) Int $[importc, header nodeclc, patternc "(-($1))", importjs, patternjs "(-($1))"]
fn neg(x Float) Float $[importc, header nodeclc, patternc "(-($1))", importjs, patternjs "(-($1))"]

fn sin(x Float) Float $[importc "sin", header "math.h"]
fn cos(x Float) Float $[importc "cos", header "math.h"]
fn sqrt(x Float) Float $[importc "sqrt", header "math.h"]
fn sqrt(x Double) Double $[importc "sqrt", header "math.h"]
