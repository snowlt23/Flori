import "core/prelude"

fn M_PI() ^float $[importc, header "math.h", patternc "M_PI", importjs, patternjs "Math.PI"]
M_PI := M_PI()

fn neg(x ^int) ^int $[importc, header nodeclc, patternc "(-($1))", importjs, patternjs "(-($1))"]
fn neg(x ^float) ^float $[importc, header nodeclc, patternc "(-($1))", importjs, patternjs "(-($1))"]
fn neg(x ^double) ^double $[importc, header nodeclc, patternc "(-($1))", importjs, patternjs "(-($1))"]

fn sin(x ^float) ^float $[importc "sin", header "math.h"]
fn cos(x ^float) ^float $[importc "cos", header "math.h"]
fn sqrt(x ^float) ^float $[importc "sqrt", header "math.h"]
fn sqrt(x ^double) ^double $[importc "sqrt", header "math.h"]
fn pow(x ^double, y ^double) ^double $[importc "pow", header "math.h"]
fn pow(x ^float, y ^float) ^float $[importc "pow", header "math.h"]
fn pow(x ^int, y ^int) ^int $[importc "pow", header "math.h"]
fn pow(x ^uint32, y ^uint32) ^uint32 $[importc "pow", header "math.h"]

fn abs(x ^float) ^float {
  if (x < 0.0) {
    neg(x)
  } else {
    x
  }
}
fn min(a ^float, b ^float) ^float {
  if (a < b) {
    a
  } else {
    b
  }
}
fn max(a ^float, b ^float) ^float {
  if (a > b) {
    a
  } else {
    b
  }
}
