
import "core/prelude"
import "core/macros"
import "core/syntax"

fn printf[T](fmt ^cstring, x ^T) $[importc "printf", header "stdio.h", importjs, patternjs "console.log($2)"]

fn print(x ^char) {
  printf("%c", x)
}
fn print(cs ^cstring) {
  printf("%s", cs)
}
fn print(x ^intlit) {
  printf("%ld", x)
}
fn print(x ^int) {
  printf("%ld", x)
}
fn print(x ^uint8) {
  printf("%d", x)
}
fn print(x ^uint32) {
  printf("%d", x)
}
fn print(x ^int32) {
  printf("%d", x)
}
fn print(x ^float) {
  printf("%f", x)
}
fn print(x ^double) {
  printf("%lf", x)
}
fn print(x ^bool) {
  if (x) {
    print("true")
  } else {
    print("false")
  }
}

macro println(args ^flist) ^fexpr $[syntax] {
  ret := new_fblock()
  for (son : args) {
    push(ret, quote {
        print(`son)
      })
  }
  push(ret, quote {
      print("\n")
    })
  ret
}
