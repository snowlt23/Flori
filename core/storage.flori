fn posname(s ^cstring) ^fmap {
  newcs := cast_cstring(malloc(len(s)+4))
  copy(newcs, s)
  copy(newcs + len(s), "pos")
  return fident(newcs)
}

syntax buffer:() ^fmap {
  name := parse()
  posname := posname(to_cstring(name))
  size := parse()
  tsym := gensym()
  vsym := gensym()
  varf := fmap("var")
  set(varf, "name", dup(vsym))
  set(varf, "vartype", ftype(tsym))
  quote {
    defprimitive `dup(tsym)` `size`
     inline fn cast_pointer(p ^ptr `dup(tsym)`) ^pointer {}
    `varf`
    `name` := cast_pointer(&(`dup(vsym)`))
    `posname` := 0
  }
}

macro <@(p ^fmap, v ^fmap) ^fmap {
  posname := posname(to_cstring(p))
  quote {
    buffer_at(&(`p`), &(`posname`), `v`)
  }
}

macro at(p ^fmap, t ^fmap, i ^fmap) ^fmap {
  quote {
    *cast_ptr_int(`p` + sizeof(`t`) * `i`)
  }
}

fn buffer_at(p ^ptr pointer, i ^ptr int, v ^int) {
  *(cast_ptr_int(*p)+ *i) = v
  *i += sizeof(^int)
}