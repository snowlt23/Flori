
import "core/prelude"
import "core/io"
import "core/macros"
import "core/syntax"
import "core/pointer"

type Array[N, T] $[importc, header nodeclc, declc "struct Array##1_##2 { #2 data[#1]; };", patternc "struct Array##1_##2"]

fn `![N, T](arr Array[N, T], i Int) T $[importc, header nodeclc, patternc "(($1).data[$2])"]
fn `!![N, T](arr ref Array[N, T], i Int, val T) $[importc, header nodeclc, patternc "($1)->data[$2] = $3"]
# fn rget[N, T](arr ref Array[N, T], i Int) ref T $[importc, header nodeclc, patternc "(&(($1)->data[$2]))"]
fn getref[N, T](arr ref Array[N, T]) Ptr[T] $[importc, header nodeclc, patternc "&(($1)->data[0])"]

macro array(elems TArray) FExpr $[syntax] {
  if (length(elems) == 0) {
    error(elems, "array should has elements.")
  }
  n := new_fintlit(length(elems))
  t := get_type(elems!0)
  tmp := gensym()
  parsed := quote {
    var `tmp Array[`n, `t]
  }
  for (i : range(0, length(elems)-1)) {
    e := elems!i
    fi := new_fintlit(i)
    push(parsed, quote {
        `tmp!`fi = `e
      })
  }
  push(parsed, tmp)
  parsed
}
