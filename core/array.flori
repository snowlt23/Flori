
import "core/prelude"
import "core/io"
import "core/macros"
import "core/syntax"
import "core/string"
import "core/pointer"

type Array[N, T] $[importc, header nodeclc, declc "struct Array##1_##2 { #2 data[#1]; };", pattern "struct Array##1_##2"]

fn get[N, T](arr Array[N, T], i Int) ref T $[importc, header nodeclc, pattern "$1.data[$2]"]
fn set[N, T](arr ref Array[N, T], i Int, val T) $[importc, header nodeclc, pattern "$1.data[$2] = $3"]
fn getref[N, T](arr ref Array[N, T]) Ptr[T] $[importc, header nodeclc, pattern "&($1.data[0])"]

syntax array(fexpr FExpr) FExpr {
  if (length(fexpr) != 3) {
    error(fexpr, "usage: array[N, T]()")
  }
  if (length(get(fexpr, 1)) != 2) {
    error(fexpr, "usage: array[N, T]()")
  }
  tmp := gensym()
  n := get(get(fexpr, 1), 0)
  t := get(get(fexpr, 1), 1)
  data := get(fexpr, 2)
  parsed := quote {
    var `tmp Array[`n, `t]
  }
  for i in range(0, length(data)-1) {
    str := to_s(i)
    fi := parse(to_cs(str))
    e := get(data, i)
    push(parsed, quote {
        set(`tmp, `fi, `e)
      })
  }
  push(parsed, tmp)
  parsed
}
