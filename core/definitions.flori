import "core/prelude"
import "core/macros"
import "core/string"

fn is_jscodegen_fn() ^bool $[importc, header nodeclc, declc "
#ifdef FLORI_JSCODEGEN
#define is_jscodegen true
#else
#define is_jscodegen false
#endif
  ", patternc "is_jscodegen"]
is_jscodegen $[compiletime] := is_jscodegen_fn()

macro is_defined(d ^fident) ^fexpr {
  tmp := gensym()
  mtmp := gensym()
  sdecl := s""
  push(sdecl, "\n#ifdef ")
  push(sdecl, to_cs(d))
  push(sdecl, "\n")
  push(sdecl, "#define ")
  push(sdecl, to_cs(tmp))
  push(sdecl, " true \n")
  push(sdecl, "#else\n")
  push(sdecl, "#define ")
  push(sdecl, to_cs(tmp))
  push(sdecl, " false \n")
  push(sdecl, "#endif\n")
  fdecl := new_fstrlit(to_cs(sdecl))
  fpat := new_fstrlit(to_cs(tmp))
  quote {
    fn `tmp() ^bool $[importc, declc `fdecl, patternc `fpat]
    macro `mtmp() ^fexpr {
      if (`tmp()) {
        quote {true}
      } else {
        quote {false}
      }
    }
    `mtmp()
  }
}

fn is_release_fn() ^bool {
  is_defined(RELEASE)
}
fn is_debug_fn() ^bool {
  not(is_defined(RELEASE))
}
is_release $[compiletime] := is_release_fn()
is_debug $[compiletime] := is_debug_fn()
