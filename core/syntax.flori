syntax for() ^fmap {
  e := parse()
  inid := parse()
  if strcmp(to_cstring(inid), "in") {} else {error_print("for stmt expect 'in ident")}
  iter := parse()
  body := parse()
  iterargs := get(iter, "args")
  push(iterargs, body)
  push(iterargs, e)
  return iter
}

macro ..(i ^fmap, body ^fmap, s ^fmap, e ^fmap) ^fmap {
  quote {
    `dup(i)` := `s`
    while `dup(i)` < `e` + 1 {
      `body`
      `dup(i)` = `dup(i)` + 1
    }
  }
}
macro ..<(i ^fmap, body ^fmap, s ^fmap, e ^fmap) ^fmap {
  quote {
    `dup(i)` := `s`
    while `dup(i)` < `e` {
      `body`
      `dup(i)` = `dup(i)` + 1
    }
  }
}

macro +=(i ^fmap, x ^fmap) ^fmap {
  quote {
    `dup(i)` = `dup(i)` + `x`
  }
}
