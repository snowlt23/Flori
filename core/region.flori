
import "core/prelude"
import "core/pointer"
import "core/io"
import "core/macros"
import "core/syntax"

type RPtr[T] {
  p Pointer
}

type WPtr[T] {
  p Pointer
}

type Region {
  data Pointer
  current Int
  size Int
  prev Ptr[Region]
}

fn new_region(size Int, dscap Int) Region {
  var r Region
  r.data = unsafe_malloc(size)
  r.current = int(0)
  r.size = size
  r.prev = unsafe_null[Region]()
  r
}

fn dealloc_region(r Region) {
  if (cast[Pointer](r.prev) != null) {
    dealloc_region(unref(r.prev))
    unsafe_free(cast[Pointer](r.prev))
  }
  unsafe_free(r.data)
}

fn extend(r ref Region, allocsize Int) {
  if (r.current + allocsize >= r.size) {
    rp := cast[Ptr[Region]](unsafe_malloc(sizeof[Region]()))
    unref(rp) = r

    newrsize := r.size*2
    while (allocsize >= newrsize) {
      newrsize = newrsize*2
    }
    r = new_region(newrsize, 1024)
    r.prev = rp
  }
}

fn alloc[T](r ref Region, len Int) RPtr[T] {
  sz := sizeof[T]() * len
  extend(r, sz)
  var rp RPtr[T]
  rp.p = cast[Pointer](cast[Int](r.data) + r.current)
  r.current += sz
  rp
}

fn alloc[T](r ref Region) RPtr[T] {
  alloc[T](r, 1)
}

fn to_ptr[T](rp RPtr[T]) Ptr[T] {
  cast[Ptr[T]](rp.p)
}

fn null_rptr[T]() RPtr[T] {
  var rp RPtr[T]
  rp.p = null
  rp
}

fn is_null[T](rp RPtr[T]) Bool {
  rp.p == null
}

fn alloc_with[T](r ref Region, len Int) WPtr[T] {
  sz := sizeof[T]() * len
  init(WPtr[T]){unsafe_malloc(sz)}
}

fn dealloc[T](wp WPtr[T]) {
  unsafe_free(cast[Pointer](wp.p))
}

fn realloc[T](wp ref WPtr[T], newlen Int) {
  wp.p = unsafe_realloc(wp.p, sizeof[T]()*newlen)
}

fn to_ptr[T](wp WPtr[T]) Ptr[T] {
  cast[Ptr[T]](wp.p)
}

#
# context
#

var g_current_region Region

fn region_settings(regsize Int, dscap Int) {
  g_current_region = new_region(regsize, dscap)
}
fn default_region_settings() {
  region_settings(1048576, 1024)
}

# for compile time memory allocations.
default_region_settings()
# for compile time free global region.
fn ct_flori_destruct() $[exportc "ct_flori_destruct"] {
  dealloc_region(g_current_region)
}
macro elimregist() FExpr {
  ct_flori_destruct()
  quote {}
}

fn alloc[T](len Int) RPtr[T] {
  alloc[T](g_current_region, len)
}
fn alloc[T]() RPtr[T] {
  alloc[T](1)
}
fn alloc_with[T](len Int) WPtr[T] {
  alloc_with[T](g_current_region, len)
}

#
# macros
#

macro in_region(size FExpr, body TBlock) FExpr $[syntax] {
  prevr := gensym()
  ret := gensym()
  tmpr := gensym()
  # newbody := convert_to_copy(prevr, body)
  if (to_cs(get_type(body)) == "Void") {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(`size, 1024)
      `body
      dealloc_region(g_current_region)
      g_current_region = `prevr
    }
  } elif (to_cs(get_type(body)) == "FExpr") {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(`size, 1024)
      `ret := `body
      dealloc_region(g_current_region)
      g_current_region = `prevr
      `ret
    }
  } else {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(`size, 1024)
      
      `ret := `body
      `tmpr := g_current_region
      g_current_region = `prevr
      `ret = copy(`ret)
      dealloc_region(`tmpr)
      `ret
    }
  }
}

macro in_region(body TBlock) FExpr $[syntax] {
  quote {
    in_region(1024) `body
  }
}

macro region(size FExpr, fndef FExpr) FExpr $[syntax] {
  fnbody := fndef!(length(fndef)-1)
  fndef!(length(fndef)-1) = quote {
    in_region `size `fnbody
  }
  quote {}
}
macro region(fndef FExpr) FExpr $[syntax] {
  quote {
    region(1024) `fndef
  }
}
