
import "core/prelude"
import "core/pointer"
import "core/io"
import "core/macros"
import "core/syntax"

type Region {
  data Ptr[UInt8]
  current Int
  size Int
  ds Ptr[Ptr[Pointer]]
  dscount Int
}

type WPtr[T] {
  p Ptr[Ptr[T]]
}

fn new_region(size Int) Region {
  var r Region
  r.data = cast[Ptr[UInt8]](unsafe_malloc(size))
  r.current = int(0)
  r.size = size
  r.ds = cast[Ptr[Ptr[Pointer]]](unsafe_malloc(1024*sizeof[Ptr[Pointer]]())) # FIXME:
  r.dscount = int(0)
  r
}
fn dealloc_region(r Region) {
  for (i : range(0, r.dscount-1)) { 
    unsafe_free(unref(unref(r.ds +! sizeof[Ptr[Pointer]]()*i)))
  }
  unsafe_free(cast[Pointer](r.ds))
  unsafe_free(cast[Pointer](r.data))
}

fn extend(r ref Region, allocsize Int) {
  if (r.current + allocsize >= r.size) {
    newrsize := r.size*2
    while (allocsize >= newrsize) {
      newrsize = newrsize*2
    }
    r.data = cast[Ptr[UInt8]](unsafe_realloc(cast[Pointer](r.data), newrsize))
  }
}

fn alloc[T](r ref Region, len Int) Ptr[T] {
  sz := sizeof[T]() * len
  extend(r, sz)
  ret := cast[Ptr[T]](r.data +! r.current)
  r.current += sz
  ret
}
fn alloc[T](r ref Region) Ptr[T] {
  alloc[T](r, 1)
}

fn alloc_with[T](r ref Region, len Int) WPtr[T] {
  sz := sizeof[T]() * len
  pp := alloc[Ptr[T]](r)
  unref(pp) = cast[Ptr[T]](unsafe_malloc(sz))
  unref(r.ds +! sizeof[Ptr[Pointer]]()*r.dscount) = cast[Ptr[Pointer]](pp)
  r.dscount += 1
  var wp WPtr[T]
  wp.p = pp
  wp
}

fn dealloc[T](p WPtr[T]) {
  unsafe_free(cast[Pointer](unref(p.p)))
}

fn realloc[T](p WPtr[T], newlen Int) {
  unref(cast[Ptr[Pointer]](p.p)) = unsafe_realloc(cast[Pointer](unref(p.p)), newlen)
}

fn to_ptr[T](p WPtr[T]) Ptr[T] {
  unref(p.p)
}

#
# context
#

var g_current_region Region

fn region_settings(regsize Int) {
  g_current_region = new_region(regsize)
}
fn default_region_settings() {
  region_settings(1048576)
}

# for compile time memory allocations.
fn ct_default_region_settings() $[compiletime] {
  default_region_settings()
}
ct_default_region_settings()

# for compile time free heap region.
fn ct_flori_destruct() $[exportc "ct_flori_destruct"] {
  dealloc_region(g_current_region)
}
macro elimregist() FExpr {
  ct_flori_destruct()
  quote {}
}

fn alloc[T](len Int) Ptr[T] {
  alloc[T](g_current_region, len)
}
fn alloc[T]() Ptr[T] {
  alloc[T](1)
}
fn alloc_with[T](len Int) WPtr[T] {
  alloc_with[T](g_current_region, len)
}

#
# macros
#

macro in_region(size FExpr, body TBlock) FExpr $[syntax] {
  prevr := gensym()
  ret := gensym()
  tmpr := gensym()
  # newbody := convert_to_copy(prevr, body)
  if (to_cs(get_type(body)) == "Void") {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(g_heap_region, `size)
      `body
      dealloc_region(g_heap_region, g_current_region)
      g_current_region = `prevr
    }
  } elif (to_cs(get_type(body)) == "FExpr") {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(g_heap_region, `size)
      `ret := `body
      dealloc_region(g_heap_region, g_current_region)
      g_current_region = `prevr
      `ret
    }
  } else {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(g_heap_region, `size)
      
      `ret := `body
      `tmpr := g_current_region
      g_current_region = `prevr
      `ret = copy(`ret)
      dealloc_region(g_heap_region, `tmpr)
      `ret
    }
  }
}

macro in_region(body TBlock) FExpr $[syntax] {
  quote {
    in_region(1024) `body
  }
}

macro region(size FExpr, fndef FExpr) FExpr $[syntax] {
  fnbody := fndef!(length(fndef)-1)
  fndef!(length(fndef)-1) = quote {
    in_region `size `fnbody
  }
  quote {}
}
macro region(fndef FExpr) FExpr $[syntax] {
  quote {
    region(1024) `fndef
  }
}
