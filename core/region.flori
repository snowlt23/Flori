
import "core/prelude"
import "core/pointer"
import "core/io"
import "core/macros"
import "core/syntax"

type HeapRegion {
  data Ptr[UInt8]
  current Int
  size Int
}

type Region {
  data Ptr[UInt8]
  current Int
  size Int
  prev Ptr[Region]
}

when (is_windows) {
  fn MEM_COMMIT() Int $[importc, header "windows.h", patternc "MEM_COMMIT"]
  fn MEM_DECOMMIT() Int $[importc, header "windows.h", patternc "MEM_DECOMMIT"]
  fn PAGE_READWRITE() Int $[importc, header "windows.h", patternc "PAGE_READWRITE"]
  fn virtual_alloc(lpaddr Pointer, size Int, alloctyp Int, protect Int) Pointer $[importc "VirtualAlloc", header "windows.h"]
  fn virtual_free(lpaddr Pointer, size Int, alloctyp Int) $[importc "VirtualFree", header "windows.h"]
}

fn sys_alloc(size Int) Ptr[UInt8] {
  when (is_windows) {
    cast[Ptr[UInt8]](virtual_alloc(null, size, MEM_COMMIT(), PAGE_READWRITE()))
  }
}
fn sys_free(p Ptr[UInt8], size Int) {
  when (is_windows) {
    virtual_free(cast[Pointer](p), size, MEM_DECOMMIT())
  }
}

fn new_heap_region(size Int) HeapRegion {
  init(HeapRegion){
    sys_alloc(size)
    0
    size
  }
}

fn free_heap_region(hr HeapRegion) {
  sys_free(hr.data, hr.size)
}

fn alloc_from_heap_region[T](r ref HeapRegion, len Int) Ptr[T] {
  sz := sizeof[T]() * len
  ret := cast[Ptr[T]](r.data +! r.current)
  r.current += sz
  ret
}

fn new_region(r ref HeapRegion, size Int) Region {
  init(Region){
    alloc_from_heap_region[UInt8](r, size)
    0
    size
    unsafe_null[Region]()
  }
}
fn dealloc_region(hr ref HeapRegion, r Region) {
  if (r.prev != unsafe_null[Region]()) {
    dealloc_region(hr, unref(r.prev))
  }
  hr.current -= r.size
}

fn extend(hr ref HeapRegion, r ref Region, allocsize Int) {
  if (r.current + allocsize >= r.size - sizeof[Ptr[Region]]()) {
    prevr := r
    newrsize := r.size*2
    while (allocsize >= newrsize) {
      newrsize = newrsize*2
    }
    r = new_region(hr, newrsize*2)
    r.prev = cast[Ptr[Region]](prevr.data)
    unref(r.prev) = prevr
  }
}

fn alloc[T](hr ref HeapRegion, r ref Region, len Int) Ptr[T] {
  sz := sizeof[T]() * len
  extend(hr, r, sz)
  ret := cast[Ptr[T]](r.data +! r.current)
  r.current += sz
  ret
}
fn alloc[T](hr ref HeapRegion, r ref Region) {
  alloc[T](hr, r, 1)
}

fn realloc[T](hr ref HeapRegion, r ref Region, p Ptr[T], plen Int, newlen Int) Ptr[T] {
  ret := alloc[T](hr, r, newlen)
  copy_memory(ret, p, plen)
  ret
}

#
# context
#

var g_heap_region HeapRegion
var g_current_region Region

fn new_region(size Int) Region {
  new_region(g_heap_region, size)
}

fn region_settings(heapsize Int, regsize Int) {
  g_heap_region = new_heap_region(heapsize)
  g_current_region = new_region(g_heap_region, regsize)
}
fn default_region_settings() {
  region_settings(2147483647, 1048576)
}

# for compile time memory allocations.
fn ct_default_region_settings() $[compiletime] {
  default_region_settings()
}
ct_default_region_settings()

# for compile time free heap region.
fn ct_flori_destruct() $[exportc "ct_flori_destruct"] {
  free_heap_region(g_heap_region)
}
macro elimregist() FExpr {
  ct_flori_destruct()
  quote {}
}

fn alloc[T](len Int) Ptr[T] {
  alloc[T](g_heap_region, g_current_region, len)
}
fn alloc[T]() Ptr[T] {
  alloc[T](1)
}
fn realloc[T](p Ptr[T], plen Int, newlen Int) Ptr[T] {
  realloc(g_heap_region, g_current_region, p, plen, newlen)
}

#
# macros
#

# fn convert_to_copy(prevr FExpr, f FExpr) FExpr $[compiletime] {
#   if (kind(f) == FEXPR_BLOCK) {
#     newf := new_fblock()
#     for e in f {
#       push(newf, convert_to_copy(prevr, e))
#     }
#     newf
#   } elif (kind(f) == FEXPR_SEQ && to_cs(get(f, 0)) == "=") {
#     dst := get(f, 1)
#     value := get(f, 2)
#     quote {
#       `dst = copy(`prevr, `value)
#     }
#   } else {
#     f
#   }
# }

macro in_region(size FExpr, body TBlock) FExpr $[syntax] {
  prevr := gensym()
  ret := gensym()
  retcopy := gensym()
  # newbody := convert_to_copy(prevr, body)
  if (to_cs(get_type(body)) == "Void") {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(g_heap_region, `size)
      `body
      dealloc_region(g_heap_region, g_current_region)
      g_current_region = `prevr
    }
  } else {
    quote {
      `prevr := g_current_region
      g_current_region = new_region(g_heap_region, `size)
      `ret := `body
      dealloc_region(g_heap_region, g_current_region)
      g_current_region = `prevr
      `ret
    }
  }
}

macro in_region(body TBlock) FExpr $[syntax] {
  quote {
    in_region(1024) `body
  }
}

macro region(size FExpr, fndef FExpr) FExpr $[syntax] {
  fnbody := fndef!(length(fndef)-1)
  fndef!(length(fndef)-1) = quote {
    in_region `size `fnbody
  }
  quote {}
}
macro region(fndef FExpr) FExpr $[syntax] {
  quote {
    region(1024) `fndef
  }
}
