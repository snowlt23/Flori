import "core/prelude"

struct pointer $[importc "void*", header nodeclc]
struct ptr[T] $[importc, header nodeclc, patternc "#1*"]

fn unsafe_malloc(size ^int) ^pointer $[importc "malloc", header "stdlib.h"]
fn unsafe_realloc(p ^pointer, size ^int) ^pointer $[importc "realloc", header "stdlib.h"]
fn unsafe_free(p ^pointer) $[importc "free", header "stdlib.h"]
fn sizeof[T]() ^int $[importc "sizeof", header nodeclc, patternc "sizeof(#1)"]
fn unsafe_memcpy(dest ^pointer, src ^pointer, n ^int) $[importc "memcpy", header "string.h"]

fn null() ^pointer {
  cast[^pointer](0)
}
null := null()
fn unsafe_null[T]() ^ptr[^T] {
  cast[^ptr[^T]](0)
}

fn `==(a ^pointer, b ^pointer) ^bool $[importc "==", header nodeclc, patternc infixc]
fn `!=(a ^pointer, b ^pointer) ^bool $[importc "!=", header nodeclc, patternc infixc]
fn `==[a](a ^ptr[^a], b ^ptr[^a]) ^bool $[importc "==", header nodeclc, patternc infixc]
fn `!=[a](a ^ptr[^a], b ^ptr[^a]) ^bool $[importc "!=", header nodeclc, patternc infixc]

fn c_alloc[a](len ^int) ^ptr[^a] {
  cast[^ptr[^T]](unsafe_malloc(sizeof[^T]()*len))
}
fn c_realloc[a](p ^ptr[^a], len ^int) ^ptr[^a] {
  cast[^ptr[^a]](unsafe_realloc(cast[^pointer](p), sizeof[^a]()*len))
}
fn c_dealloc[a](p ^ptr[^a]) {
  unsafe_free(cast[^pointer](p))
}
fn copy_memory_size[a](dest ^pointer, src ^pointer, size ^int) {
  unsafe_memcpy(dest, src, size)
}
fn copy_memory[a](dest ^ptr[^a], src ^ptr[^a], len ^int) {
  unsafe_memcpy(cast[^pointer](dest), cast[^pointer](src), sizeof[^a]() * len)
}

fn `+![a](p ^ptr[^a], i ^int) ^ptr[^a] {
  cast[^ptr[^a]](cast[^int](p) + i)
}
fn `+![a](p ^ptr[^a], i ^int32) ^ptr[^a] {
  cast[^ptr[^a]](cast[^int32](p) + i)
}

fn unref[a](p ^ptr[^a]) ^ref a $[importc, header nodeclc, patternc "($1)"]
fn getptr[a](p ^a) ^ptr[^a] $[importc, header nodeclc, patternc "(&$1)"]
fn getref[a](v ^ref a) ^ptr[^a] $[importc, header nodeclc, patternc "$1"]

fn `![T](p ^ptr[^T], i ^int) ^T {
  unref(p +! (i * sizeof[^T]()))
}
fn `![T](p ^ptr[^T], i ^int32) ^T {
  unref(p +! (i * cast[^int32](sizeof[^T]())))
}
fn `!![T](p ^ptr[^T], i ^int, value ^T) {
  unref(p +! (i * sizeof[^T]())) = value
}
fn `!![T](p ^ptr[^T], i ^int32, value ^T) {
  unref(p +! (i * cast[^int32](sizeof[^T]()))) = value
}

fn print[T](p ^ptr[^T]) {
  printf("%p", p)
}
