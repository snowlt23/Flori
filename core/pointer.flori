macro expand_ptr(t ^fmap) ^fmap {
  pt := ftype(t)
  set(pt, "ptr", fintlit(1))
  quote {
    inline fn +(a `pt`, b ^int) `pt` {genadd()}
    inline fn -(a `pt`, b ^int) `pt` {gensub()}
    inline fn return(r `pt`) {genret()}
    inline fn *(p `pt`) `t` {genderef()}
    inline fn *=(p `pt`, v `t`) {genset()}
    inline fn *lvalue(p `pt`) `pt` {genlvalue()}
    inline fn cast_int(p `pt`) ^int {}
    inline fn cast_pointer(p `pt`) ^pointer {}
  }
}

macro ptr_macro(t ^fmap) ^fmap {
  pt := ftype(t)
  set(pt, "ptr", fintlit(1))
  prim := quote {
    expand_ptr(`t`)
    expand_ptr(`pt`)
  }
  semeval(prim)
  return pt
}

syntax ^ptr() ^fmap {
  t := parse()
  t = ftype(t)
  quote ptr_macro(`t`)
}
