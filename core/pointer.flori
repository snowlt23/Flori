
import "core/prelude"

type Pointer $[importc "void*", header nodeclc]
type Ptr[T] $[importc, header nodeclc, patternc "#1*"]

fn unsafe_malloc(size Int) Pointer $[importc "malloc", header "stdlib.h"]
fn unsafe_realloc(ptr Pointer, size Int) $[importc "realloc", header "stdlib.h"]
fn unsafe_free(ptr Pointer) $[importc "free", header "stdlib.h"]
fn sizeof[T]() Int $[importc "sizeof", header nodeclc, patternc "sizeof(#1)"]
fn unsafe_memcpy(dest Pointer, src Pointer, n Int) $[importc "memcpy", header "string.h"]

fn null() Pointer {
  cast[Pointer](0)
}
null := null()
fn unsafe_null[T]() Ptr[T] {
  cast[Ptr[T]](0)
}

fn `==(a Pointer, b Pointer) Bool $[importc "==", header nodeclc, patternc infixc]
fn `!=(a Pointer, b Pointer) Bool $[importc "!=", header nodeclc, patternc infixc]
fn `==[T](a Ptr[T], b Ptr[T]) Bool $[importc "==", header nodeclc, patternc infixc]
fn `!=[T](a Ptr[T], b Ptr[T]) Bool $[importc "!=", header nodeclc, patternc infixc]

fn c_alloc[T](len Int) Ptr[T] {
  cast[Ptr[T]](unsafe_malloc(sizeof[T]()*len))
}
fn c_realloc[T](ptr Ptr[T], len Int) Ptr[T] {
  cast[Ptr[T]](unsafe_realloc(cast[Pointer](ptr), sizeof[T]()*len))
}
fn c_dealloc[T](ptr Ptr[T]) {
  unsafe_free(cast[Pointer](ptr))
}
fn copy_memory[T](dest Ptr[T], src Ptr[T], len Int) {
  unsafe_memcpy(cast[Pointer](dest), cast[Pointer](src), sizeof[T]() * len)
}

fn `+![T](p Ptr[T], i Int) Ptr[T] {
  cast[Ptr[T]](cast[Int](p) + i)
}

fn unref[T](p Ptr[T]) ref T $[importc, header nodeclc, patternc "($1)"]
fn getptr[T](p T) Ptr[T] $[importc, header nodeclc, patternc "(&$1)"]

fn get[T](p Ptr[T], i Int) T {
  unref(p +! (i * sizeof[T]()))
}
fn set[T](p Ptr[T], i Int, value T) {
  unref(p +! (i * sizeof[T]())) = value
}

fn print[T](p Ptr[T]) {
  printf("%p", p)
}
