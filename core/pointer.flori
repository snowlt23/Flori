
type Pointer $[importc "void*", header nodeclc]
type Ptr[T] $[importc, header nodeclc, pattern "#1*"]

fn cast[T, F](val F) T $[importc, header nodeclc, pattern "((#1)($1))"]
fn unsafe_malloc(size Int) Pointer $[importc "malloc", header "stdlib.h"]
fn unsafe_realloc(ptr Pointer, size Int) $[importc "realloc", header "stdlib.h"]
fn unsafe_free(ptr Pointer) $[importc "free", header "stdlib.h"]
fn sizeof(T Typedesc) $[importc "sizeof", header nodeclc, pattern "sizeof($1)"]

fn alloc[T](len Int) Ptr[T] {
  cast[Ptr[T]](unsafe_malloc(sizeof(T)*len))
}
fn realloc[T](ptr Ptr[T], len Int) Ptr[T] {
  cast[Ptr[T]](unsafe_realloc(cast[Pointer](ptr), len))
}
fn dealloc[T](ptr Ptr[T]) {
  unsafe_free(cast[Pointer](ptr))
}
