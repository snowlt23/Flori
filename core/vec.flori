
(require prelude :refer :all)

@(^ (:a All))
(defstruct (Vec :a)
  (data (Ptr :a))
  (len Size))

@(^ (:a All))
@(: (Typedesc :a) Size -> (Vec :a))
(defn vec [T len]
  (construct (Vec :a)
    :data (cast (Ptr :a) (alloc (* (sizeof :a) len)))
    :len len))

@(^ (:a All))
@(: (Vec :a) :a)
(defn push [vec value]
  (realloc (cast Pointer (vec .data)) (* (sizeof :a) (+ (vec .len) (size 1))))
  (set! (nth (vec .data) (vec .len)) value)
  (set! (vec .len) (+ (vec .len) (size 1))))

@(^ (:a All))
@(: (Vec :a) -> Size)
(defn len [vec]
  (vec .len))

@(^ (:a All))
@(: (Vec :a) Size -> :a)
(defn nth [vec index]
  (nth (vec .data) index))
@(^ (:a All))
@(: (Vec :a) Size :a)
(defn set-nth! [vec index value]
  (set! (nth (vec .data) index) value))

@(^ (:a Destructable))
@(: (Vec :a))
(defn destructor [vec]
  (var i (size 0))
  (while (< i (len vec))
    (destructor (nth vec i))
    (set! i (+ i (size 1))))
  (dealloc (cast Pointer (vec .data))))
