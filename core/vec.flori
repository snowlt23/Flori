
(require prelude :refer :all)

@(^ (:a All))
(defstruct Vec
  (data (Ptr :a))
  (len Size))

@(^ (:a All))
@(: Size -> (Vec :a))
(defn vec [len]
  (Vec
    :data (cast Vec (malloc (* (sizeof :a) len)))
    :len len))

@(^ (:a All))
@(: (Vec :a) :a)
(defn push [vec value]
  (realloc (vec data) (* (sizeof a) (+ (vec len) 1)))
  (set! (nth (vec data) (vec len)) value)
  (set! (vec len) (+ (vec len) 1)))

@(^ (:a All))
@(: (Vec :a) -> Size)
(defn len [vec]
  (vec len))

@(^ (:a All))
@(: (Vec :a) Size -> :a)
(defn nth [vec index]
  (nth (vec data)) index)

@(^ (:a All))
@(: (Vec :a))
(defn destructor [vec]
  (dealloc (vec data)))
