
import "core/prelude"
import "core/pointer"
import "core/io"
import "core/syntax"
import "core/macros"
import "core/region"

type Vec[T] $[nodestruct] {
  data Ptr[T]
  cap Int
  len Int
}

fn vec[T](len Int, cap Int) Vec[T] $[importjs, patternjs "new Array($1)"] {
  v := init(Vec[T]) {
    alloc[T](cap)
    cap
    len
  }
  v
}
fn vec[T](len Int) Vec[T] {
  vec[T](len, len * 2)
}
fn vec[T]() Vec[T] {
  vec[T](0, 8)
}

fn copy[T](r ref Region, v Vec[T]) Vec[T] {
  newv := vec[T](v.len, v.cap)
  memcpy(newv.data, v.data, sizeof[T]() * v.len)
  newv
}

# fn copy[T](v Vec[T]) Vec[T] {
#   ret := vec[T](v.len, v.cap)
#   for i in range(0, length(v)-1) {
#     when (is_copyable(T)) {
#       set(ret, i, copy(get(v, i)))
#     }
#     when (not(is_copyable(T))) {
#       set(ret, i, get(v, i))
#     }
#   }
#   ret
# }

macro vec(elems TArray) FExpr $[syntax] {
  if (length(elems) == 0) {
    error(elems, "vec syntax require arguments.")
  }
  ret := new_fblock()
  tmp := gensym()
  t := get_type(get(elems, 0))
  push(ret, quote {
      `tmp := vec[`t]()
    })
  for e in elems {
    push(ret, quote {
        push(`tmp, `e)
      })
  }
  push(ret, tmp)
  ret
}

fn extend[T](v ref Vec[T]) {
  v.data = realloc(v.data, v.cap, v.cap*2)
  v.cap = v.cap*2
}

fn push[T](v ref Vec[T], value T) $[nodestruct, importjs, patternjs "$1.push($2)"] {
  if (v.cap < v.len+1) {
    extend(v)
  }
  unref(v.data +! (v.len * sizeof[T]())) = value
  v.len += 1
}

fn length[T](v Vec[T]) Int $[importjs, patternjs "$1.length"] {
  v.len
}

fn get[T](v Vec[T], i Int) T $[importjs, patternjs "$1[$2]"] {
  unref(v.data +! (i * sizeof[T]()))
}

fn set[T](v ref Vec[T], i Int, value T) $[nodestruct] {
  unref(v.data +! (i * sizeof[T]())) = value
}

iterator items[T](v TExpr[Vec[T]]) {
  i := gensym()
  quote {
    for `i in range(0, length(`v)-1) {
      `element := get(`v, `i)
      `yield
    }
  }
}

fn print[T](v Vec[T]) {
  print("vec[")
  if (length(v) > 0) {
    print(get(v, 0))
  }
  for i in range(1, length(v)-1) {
    print(", ")
    print(get(v, i))
  }
  print("]")
}

fn getref[T](v ref Vec[T]) Ptr[T] {
  v.data
}
