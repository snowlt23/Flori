import "core/prelude"
import "core/pointer"
import "core/io"
import "core/syntax"
import "core/macros"
import "core/region"

struct vec[T] {
  data ^wptr[^T]
  cap ^int
  len ^int
}

fn vec[T](len ^int, cap ^int) ^vec[^T] $[importjs, patternjs "new Array($1)"] {
  init(^vec[^T]) {
    alloc_with[^T](cap)
    cap
    len
  }
}
fn vec[T](len ^int) ^vec[^T] {
  vec[^T](len, len * 2)
}
fn vec[T]() ^vec[^T] {
  vec[^T](0, 32)
}

fn copy[T](r ^ref region, v ^vec[^T]) ^vec[^T] {
  newv := vec[^T](v.len, v.cap)
  copy_memory(to_ptr(newv.data), to_ptr(v.data), sizeof[^T]() * v.len)
  newv
}

macro vec(elems ^tarray) ^fexpr $[syntax] {
  if (length(elems) == 0) {
    error(elems, "vec syntax require arguments.")
  }
  ret := new_fblock()
  tmp := gensym()
  t := get_type(elems!0)
  push(ret, quote {
      `tmp := vec[`t]()
    })
  for (e : elems) {
    push(ret, quote {
        push(`tmp, `e)
      })
  }
  push(ret, tmp)
  ret
}

fn extend[T](v ^ref vec[^T]) {
  realloc(v.data, v.cap*2)
  v.cap = v.cap*2
}

fn push[T](v ^ref vec[^T], value ^T) $[importjs, patternjs "$1.push($2)"] {
  if (v.cap <= v.len) {
    extend(v)
  }
  unref(to_ptr(v.data) +! (v.len * sizeof[^T]())) = value
  v.len += 1
}

fn length[T](v ^vec[^T]) ^int $[importjs, patternjs "$1.length"] {
  v.len
}

fn `![T](v ^vec[^T], i ^int) ^ref T $[importjs, patternjs "$1[$2]"] {
  unref(to_ptr(v.data) +! (i * sizeof[^T]()))
}

fn `!![T](v ^ref vec[^T], i ^int, value ^T) {
  unref(to_ptr(v.data) +! (i * sizeof[^T]())) = value
}

iterator items[T](v ^texpr[^vec[^T]]) {
  i := gensym()
  quote {
    for (`i : range(int(0), length(`v)-1)) {
      `element := `v!`i
      `yield
    }
  }
}

fn print[T](v ^vec[^T]) {
  print("vec[")
  if (length(v) > 0) {
    print(v!0)
  }
  for (i : range(1, length(v)-1)) {
    print(", ")
    print(v!i)
  }
  print("]")
}

fn getref[T](v ^ref vec[^T]) ^ptr[^T] {
  v.data.p
}
