
import core.prelude
import core.pointer

type Vec[T] {
  data Ptr[T]
  len Int
}

fn vec[T](len Int) {
  init(Vec) {
    alloc[T](len)
    len
  }
}

fn push[T](v Vec[T], value T) {
  v.data = realloc(realloc(vec.data, vec.len+1))
  v.data[vec.len] = value
  v.len += 1
}

fn len[T](v Vec[T]) {
  v.len
}

fn `[][T](v Vec[T], i Int) T {
  v.data[i]
}

fn destructor[T](v Vec[T]) {
  when (is_destructable(T)) {
    for i in 0..<v.len {
      destructor(v[i])
    }
  }
  dealloc(vec.data)
}
