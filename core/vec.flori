
import core/prelude
import core/pointer
import core/io
import core/syntax

type Vec[T] {
  data Ptr[T]
  len Int
}

fn vec[T](len Int) Vec[T] {
  v := init(Vec[T]) {
    alloc[T](len)
    len
  }
  v
}
fn vec[T]() Vec[T] {
  vec[T](0)
}

fn push[T](v ref Vec[T], value T) {
  track(v <-> value)
  (v.data) = realloc(v.data, (v.len)+1)
  unref((v.data) +! ((v.len) * sizeof[T]())) = value
  (v.len) += 1
}

fn length[T](v Vec[T]) Int {
  v.len
}

fn access[T](v Vec[T], i Int) T {
  unref((v.data) +! (i * sizeof[T]()))
}

fn destructor[T](v Vec[T]) {
  println("Vec destroyed!")
  when (is_destructable(v)) {
    for i in range(0, length(v)-1) {
      destructor(access(v, i))
    }
  }
  println(is_destructable(v))
  dealloc(v.data)
}
