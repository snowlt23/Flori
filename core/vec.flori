
(require prelude :refer :all)

(defstruct Vec
  (data (Ptr :a))
  (len Size))

@(: (Typedesc :a) Size -> (Vec :a))
(defn vec [len]
  (Vec. (new-ptr-array :a len) len))

@(: &(Vec :a) :a)
(defn push [vec value]
  (realloc (cast Pointer (.data vec)) (* (sizeof :a) (+ (.len vec) (size 1))))
  (set! (nth (.data vec) (.len vec)) value)
  (set! (.len vec) (+ (.len vec) (size 1))))

@(: (Vec :a) -> Size)
(defn len [vec]
  (.len vec))

@(: (Vec :a) Size -> :a)
(defn nth [vec index]
  (nth (.data vec) index))
@(: &(Vec :a) Size :a)
(defn set-nth! [vec index value]
  (set! (nth (.data vec) index) value))

@(: (Vec :a))
(defn destructor [vec]
  (var i (size 0))
  (when (is :a Destructable)
    (while (< i (len vec))
      (destructor (nth vec i))
      (set! i (+ i (size 1)))))
  (dealloc (cast Pointer (.data vec))))
