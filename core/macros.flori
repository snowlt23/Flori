
import "core/prelude"

type FExpr $[importc "flori_fexpr", header "floriffi.h"]
type TExpr[T] $[importc "flori_fexpr", header "floriffi.h"]
type FExprKind $[importc "int", header "floriffi.h"]

FEXPR_IDENT := cast[FExprKind](0)
FEXPR_PREFIX := cast[FExprKind](1)
FEXPR_INFIX := cast[FExprKind](2)
FEXPR_QUOTE := cast[FExprKind](3)
FEXPR_SYMBOL := cast[FExprKind](4)
FEXPR_INTLIT := cast[FExprKind](5)
FEXPR_STRLIT := cast[FExprKind](6)
FEXPR_SEQ := cast[FExprKind](7)
FEXPR_ARRAY := cast[FExprKind](8)
FEXPR_LIST := cast[FExprKind](9)
FEXPR_BLOCK := cast[FExprKind](10)

fn `==(a FExprKind, b FExprKind) Bool $[importc "==", header nodeclc, pattern infixc]
fn `!=(a FExprKind, b FExprKind) Bool $[importc "!=", header nodeclc, pattern infixc]

fn new_fident(ident CString) FExpr $[importc "flori_new_fident", header "floriffi.h"]
fn new_fseq() FExpr $[importc "flori_new_fseq", header "floriffi.h"]
fn new_farray() FExpr $[importc "flori_new_farray", header "floriffi.h"]
fn new_flist() FExpr $[importc "flori_new_flist", header "floriffi.h"]
fn new_fblock() FExpr $[importc "flori_new_fblock", header "floriffi.h"]
fn new_fstrlit(cs CString) FExpr $[importc "flori_new_fstrlit", header "floriffi.h"]
fn parse(cstr CString) FExpr $[importc "flori_parse_fexpr", header "floriffi.h"]
fn print(fexpr FExpr) $[importc "flori_print_fexpr", header "floriffi.h"]
fn push(fexpr FExpr, son FExpr) $[importc "flori_push", header "floriffi.h"]
fn length(fexpr FExpr) Int $[importc "flori_length", header "floriffi.h"]
fn kind(fexpr FExpr) FExprKind $[importc "flori_kind", header "floriffi.h"]
fn expect(fexpr FExpr, kind FExprKind) $[importc "flori_expect", header "floriffi.h"]
fn error(fexpr FExpr, msg CString) $[importc "flori_error", header "floriffi.h"]
fn get(fexpr FExpr, i Int) FExpr $[importc "flori_access", header "floriffi.h"]
fn set(fexpr FExpr, i Int, value FExpr) $[importc "flori_set", header "floriffi.h"]
fn to_cs(fexpr FExpr) CString $[importc "flori_to_cs", header "floriffi.h"]
fn gensym() FExpr $[importc "flori_gensym", header "floriffi.h"]

fn push[T](fexpr FExpr, son TExpr[T]) $[importc "flori_push", header "floriffi.h"]

fn quote_expand_inside(fexpr FExpr, args FExpr, count Int) Int {
  i := 0
  while (i < length(fexpr)) {
    k := kind(get(fexpr, i))
    if (k == FEXPR_QUOTE) {
      set(fexpr, i, get(args, count))
      count += 1
    }
    if ((k == FEXPR_SEQ) || (k == FEXPR_ARRAY) || (k == FEXPR_LIST) || (k == FEXPR_BLOCK)) {
      count = quote_expand_inside(get(fexpr, i), args, count)
    }
    i += 1
  }
  count
}

fn quote_expand(fexpr FExpr, args FExpr) FExpr {
  count := 0
  quote_expand_inside(fexpr, args, count)
  fexpr
}
