import "core/prelude"

struct fexpr $[importc "flori_fexpr", header "floriffi.h"]
struct fseq $[importc "flori_fexpr", header "floriffi.h"]
struct farray $[importc "flori_fexpr", header "floriffi.h"]
struct flist $[importc "flori_fexpr", header "floriffi.h"]
struct fblock $[importc "flori_fexpr", header "floriffi.h"]
struct fident $[importc "flori_fexpr", header "floriffi.h"]
struct fsymbol $[importc "flori_fexpr", header "floriffi.h"]
struct fstrlit $[importc "flori_fexpr", header "floriffi.h"]
struct fintlit $[importc "flori_fexpr", header "floriffi.h"]
struct texpr[t] $[importc "flori_fexpr", header "floriffi.h"]
struct tseq $[importc "flori_fexpr", header "floriffi.h"]
struct tarray $[importc "flori_fexpr", header "floriffi.h"]
struct tlist $[importc "flori_fexpr", header "floriffi.h"]
struct tblock $[importc "flori_fexpr", header "floriffi.h"]
struct tident $[importc "flori_fexpr", header "floriffi.h"]
struct tsymbol $[importc "flori_fexpr", header "floriffi.h"]
struct tstrlit $[importc "flori_fexpr", header "floriffi.h"]
struct tintlit $[importc "flori_fexpr", header "floriffi.h"]
struct fexprkind $[importc "int", header "floriffi.h"]

FEXPR_IDENT $[compiletime] := cast[^fexprkind](0)
FEXPR_PREFIX $[compiletime] := cast[^fexprkind](1)
FEXPR_INFIX $[compiletime] := cast[^fexprkind](2)
FEXPR_QUOTE $[compiletime] := cast[^fexprkind](3)
FEXPR_SYMBOL $[compiletime] := cast[^fexprkind](4)
FEXPR_INTLIT $[compiletime] := cast[^fexprkind](5)
FEXPR_FLOATLIT $[compiletime] := cast[^fexprkind](6)
FEXPR_STRLIT $[compiletime] := cast[^fexprkind](7)
FEXPR_SEQ $[compiletime] := cast[^fexprkind](8)
FEXPR_ARRAY $[compiletime] := cast[^fexprkind](9)
FEXPR_LIST $[compiletime] := cast[^fexprkind](10)
FEXPR_BLOCK $[compiletime] := cast[^fexprkind](11)

fn to_fexpr(t ^fseq) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^farray) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^flist) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^fblock) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^fident) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^fsymbol) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^fstrlit) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^fintlit) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}

fn to_fexpr[T](t ^texpr[^T]) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tseq) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tarray) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tlist) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tblock) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tident) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tsymbol) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tstrlit) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}
fn to_fexpr(t ^tintlit) ^fexpr $[converter, compiletime] {cast[^fexpr](t)}

fn `==(a ^fexprkind, b ^fexprkind) ^bool $[importc "==", header nodeclc, patternc infixc, importjs]
fn `!=(a ^fexprkind, b ^fexprkind) ^bool $[importc "!=", header nodeclc, patternc infixc, importjs]

fn fident(ident ^cstring) ^fexpr $[importc "flori_new_fident", header "floriffi.h", importjs]
fn new_fident(ident ^cstring) ^fexpr $[importc "flori_new_fident", header "floriffi.h", importjs]
fn new_fseq() ^fexpr $[importc "flori_new_fseq", header "floriffi.h", importjs]
fn new_farray() ^fexpr $[importc "flori_new_farray", header "floriffi.h", importjs]
fn new_flist() ^fexpr $[importc "flori_new_flist", header "floriffi.h", importjs]
fn new_fblock() ^fexpr $[importc "flori_new_fblock", header "floriffi.h", importjs]
fn new_fintlit(x ^int) ^fexpr $[importc "flori_new_fintlit", header "floriffi.h", importjs]
fn new_fstrlit(cs ^cstring) ^fexpr $[importc "flori_new_fstrlit", header "floriffi.h", importjs]

fn parse(filename ^cstring, line ^int, linepos ^int, cstr ^cstring) ^fexpr $[importc "flori_parse_fexpr", header "floriffi.h", importjs]

fn print(f ^fexpr) $[importc "flori_print_fexpr", header "floriffi.h", importjs]

fn push(f ^fexpr, son ^fexpr) $[importc "flori_push", header "floriffi.h", importjs]
fn push[t](f ^fexpr, son ^texpr[^t]) $[importc "flori_push", header "floriffi.h", importjs]

fn length(f ^fexpr) ^int $[importc "flori_length", header "floriffi.h", importjs]
fn error(f ^fexpr, msg ^cstring) $[importc "flori_error", header "floriffi.h", importjs]
fn quoted(f ^fexpr) ^fexpr $[importc "flori_quoted", header "floriffi.h", importjs]
fn kind(f ^fexpr) ^fexprkind $[importc "flori_kind", header "floriffi.h", importjs]
fn expect(f ^fexpr, kind ^fexprkind) $[importc "flori_expect", header "floriffi.h", importjs]

fn `!(f ^fexpr, i ^int) ^fexpr $[importc "flori_access", header "floriffi.h", importjs]
fn `!!(f ^fexpr, i ^int, value ^fexpr) $[importc "flori_set", header "floriffi.h", importjs]

fn to_cs(f ^fexpr) ^cstring $[importc "flori_to_cs", header "floriffi.h", importjs]
fn intval(f ^fintlit) ^int $[importc "flori_intval", header "floriffi.h", importjs]
fn strval(f ^fstrlit) ^cstring $[importc "flori_strval", header "floriffi.h", importjs]
fn gensym() ^fexpr $[importc "flori_gensym", header "floriffi.h", importjs]
fn get_type(f ^fexpr) ^fexpr $[importc "flori_get_type", header "floriffi.h", importjs]
fn get_srcexpr(f ^fexpr) ^cstring $[importc "flori_get_srcexpr", header "floriffi.h", importjs]

fn quote_expand_inside(f ^fexpr, args ^fexpr, count ^ref int) $[compiletime, importjs] {
  i := 0
  while (i < length(f)) {
    k := kind(f!i)
    if (k == FEXPR_QUOTE && kind(quoted(f!i)) == FEXPR_IDENT) {
      f!i = args!count
      count += 1
    } elif (k == FEXPR_QUOTE && kind(quoted(f!i)) == FEXPR_QUOTE) {
      f!i = quoted(f!i)
    }
    if (k == FEXPR_SEQ || k == FEXPR_ARRAY || k == FEXPR_LIST || k == FEXPR_BLOCK) {
      quote_expand_inside(f!i, args, count)
    }
    i += 1
  }
}

fn quote_expand(f ^fexpr, args ^fexpr) ^fexpr $[compiletime, importjs] {
  count := 0
  quote_expand_inside(f, args, count)
  f
}

fn is_windows_fn() ^bool $[importc, header nodeclc, declc "
#ifdef _WIN32
#define is_windows true
#elif _WIN64
#define is_windows true
#else
#define is_windows false
#endif
  ", patternc "is_windows"]
is_windows $[compiletime] := is_windows_fn()
