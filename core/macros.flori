
import "core/prelude"

type FExpr $[nodestruct, importc "flori_fexpr", header "floriffi.h"]
type FSeq $[importc "flori_fexpr", header "floriffi.h"]
type FArray $[importc "flori_fexpr", header "floriffi.h"]
type FList $[importc "flori_fexpr", header "floriffi.h"]
type FBlock $[importc "flori_fexpr", header "floriffi.h"]
type FIdent $[importc "flori_fexpr", header "floriffi.h"]
type FSymbol $[importc "flori_fexpr", header "floriffi.h"]
type FStrLit $[importc "flori_fexpr", header "floriffi.h"]
type FIntLit $[importc "flori_fexpr", header "floriffi.h"]
type TExpr[T] $[importc "flori_fexpr", header "floriffi.h"]
type TSeq $[importc "flori_fexpr", header "floriffi.h"]
type TArray $[importc "flori_fexpr", header "floriffi.h"]
type TList $[importc "flori_fexpr", header "floriffi.h"]
type TBlock $[importc "flori_fexpr", header "floriffi.h"]
type TIdent $[importc "flori_fexpr", header "floriffi.h"]
type TSymbol $[importc "flori_fexpr", header "floriffi.h"]
type TStrLit $[importc "flori_fexpr", header "floriffi.h"]
type TIntLit $[importc "flori_fexpr", header "floriffi.h"]
type FExprKind $[importc "int", header "floriffi.h"]

FEXPR_IDENT $[compiletime] := cast[FExprKind](0)
FEXPR_PREFIX $[compiletime] := cast[FExprKind](1)
FEXPR_INFIX $[compiletime] := cast[FExprKind](2)
FEXPR_QUOTE $[compiletime] := cast[FExprKind](3)
FEXPR_SYMBOL $[compiletime] := cast[FExprKind](4)
FEXPR_INTLIT $[compiletime] := cast[FExprKind](5)
FEXPR_FLOATLIT $[compiletime] := cast[FExprKind](6)
FEXPR_STRLIT $[compiletime] := cast[FExprKind](7)
FEXPR_SEQ $[compiletime] := cast[FExprKind](8)
FEXPR_ARRAY $[compiletime] := cast[FExprKind](9)
FEXPR_LIST $[compiletime] := cast[FExprKind](10)
FEXPR_BLOCK $[compiletime] := cast[FExprKind](11)

fn to_fexpr[T](texpr TExpr[T]) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TSeq) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TArray) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TList) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TBlock) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TIdent) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TSymbol) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TStrLit) FExpr $[converter, compiletime] {cast[FExpr](texpr)}
fn to_fexpr(texpr TIntLit) FExpr $[converter, compiletime] {cast[FExpr](texpr)}

fn `==(a FExprKind, b FExprKind) Bool $[importc "==", header nodeclc, patternc infixc, importjs]
fn `!=(a FExprKind, b FExprKind) Bool $[importc "!=", header nodeclc, patternc infixc, importjs]

fn new_fident(ident CString) FExpr $[importc "flori_new_fident", header "floriffi.h", importjs]
fn new_fseq() FExpr $[importc "flori_new_fseq", header "floriffi.h", importjs]
fn new_farray() FExpr $[importc "flori_new_farray", header "floriffi.h", importjs]
fn new_flist() FExpr $[importc "flori_new_flist", header "floriffi.h", importjs]
fn new_fblock() FExpr $[importc "flori_new_fblock", header "floriffi.h", importjs]
fn new_fintlit(x Int) FExpr $[importc "flori_new_fintlit", header "floriffi.h", importjs]
fn new_fstrlit(cs CString) FExpr $[importc "flori_new_fstrlit", header "floriffi.h", importjs]
fn parse(filename CString, line Int, linepos Int, cstr CString) FExpr $[importc "flori_parse_fexpr", header "floriffi.h", importjs]
fn print(fexpr FExpr) $[importc "flori_print_fexpr", header "floriffi.h", importjs]

fn push(fexpr FExpr, son FExpr) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FSeq) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FArray) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FList) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FBlock) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FIdent) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FSymbol) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FStrLit) $[importc "flori_push", header "floriffi.h", importjs]
fn push(fexpr FExpr, son FIntLit) $[importc "flori_push", header "floriffi.h", importjs]
fn push[T](fexpr FExpr, son TExpr[T]) $[importc "flori_push", header "floriffi.h", importjs]

fn length(fexpr FExpr) Int $[importc "flori_length", header "floriffi.h", importjs]
fn length(fexpr FSeq) Int $[importc "flori_length", header "floriffi.h", importjs]
fn length(fexpr FList) Int $[importc "flori_length", header "floriffi.h", importjs]
fn length(fexpr FArray) Int $[importc "flori_length", header "floriffi.h", importjs]
fn length(fexpr FBlock) Int $[importc "flori_length", header "floriffi.h", importjs]

fn error(fexpr FExpr, msg CString) $[importc "flori_error", header "floriffi.h", importjs]
fn error(fexpr FStrLit, msg CString) $[importc "flori_error", header "floriffi.h", importjs]
fn error(fexpr FIntLit, msg CString) $[importc "flori_error", header "floriffi.h", importjs]

fn quoted(fexpr FExpr) FExpr $[importc "flori_quoted", header "floriffi.h", importjs]
fn kind(fexpr FExpr) FExprKind $[importc "flori_kind", header "floriffi.h", importjs]
fn expect(fexpr FExpr, kind FExprKind) $[importc "flori_expect", header "floriffi.h", importjs]

fn get(fexpr FExpr, i Int) FExpr $[importc "flori_access", header "floriffi.h", importjs]
fn get(fexpr FSeq, i Int) FExpr $[importc "flori_access", header "floriffi.h", importjs]
fn get(fexpr FArray, i Int) FExpr $[importc "flori_access", header "floriffi.h", importjs]
fn get(fexpr FList, i Int) FExpr $[importc "flori_access", header "floriffi.h", importjs]
fn get(fexpr FBlock, i Int) FExpr $[importc "flori_access", header "floriffi.h", importjs]

fn set(fexpr FExpr, i Int, value FExpr) $[importc "flori_set", header "floriffi.h", importjs]
fn set(fexpr FSeq, i Int, value FExpr) $[importc "flori_set", header "floriffi.h", importjs]
fn set(fexpr FArray, i Int, value FExpr) $[importc "flori_set", header "floriffi.h", importjs]
fn set(fexpr FList, i Int, value FExpr) $[importc "flori_set", header "floriffi.h", importjs]
fn set(fexpr FBlock, i Int, value FExpr) $[importc "flori_set", header "floriffi.h", importjs]

fn to_cs(fexpr FExpr) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FSeq) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FArray) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FList) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FBlock) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FIdent) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FSymbol) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FStrLit) CString $[importc "flori_to_cs", header "floriffi.h", importjs]
fn to_cs(fexpr FIntLit) CString $[importc "flori_to_cs", header "floriffi.h", importjs]

fn strval(fexpr FStrLit) CString $[importc "flori_strval", header "floriffi.h", importjs]
fn gensym() FExpr $[importc "flori_gensym", header "floriffi.h", importjs]
fn get_type(fexpr FExpr) FExpr $[importc "flori_get_type", header "floriffi.h", importjs]

fn quote_expand_inside(fexpr FExpr, args FExpr, count Int) Int $[compiletime, importjs] {
  i := 0
  while (i < length(fexpr)) {
    k := kind(get(fexpr, i))
    if (k == FEXPR_QUOTE && kind(quoted(get(fexpr, i))) != FEXPR_INFIX) {
      set(fexpr, i, get(args, count))
      count += 1
    }
    if (k == FEXPR_SEQ || k == FEXPR_ARRAY || k == FEXPR_LIST || k == FEXPR_BLOCK) {
      count = quote_expand_inside(get(fexpr, i), args, count)
    }
    i += 1
  }
  count
}

fn quote_expand(fexpr FExpr, args FExpr) FExpr $[compiletime, importjs] {
  count := 0
  quote_expand_inside(fexpr, args, count)
  fexpr
}

fn is_compiletime_fn() Bool $[importc, header nodeclc, declc "
#ifdef FLORI_COMPILETIME
#define is_compiletime true
#else
#define is_compiletime false
#endif
  ", patternc "is_compiletime"]
is_compiletime $[compiletime] := is_compiletime_fn()
is_runtime $[compiletime] := not(is_compiletime)

fn is_windows_fn() Bool $[importc, header nodeclc, declc "
#ifdef _WIN32
#define is_windows true
#elif _WIN64
#define is_windows true
#else
#define is_windows false
#endif
  ", patternc "is_windows"]
is_windows $[compiletime] := is_windows_fn()
