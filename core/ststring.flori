import "core/prelude"
import "core/pointer"
import "core/cstring"
import "core/io"
import "core/syntax"
import "core/math"
import "core/macros"
import "core/vec"
import "core/region"
import "core/array"
import "core/string"

struct ststring {
  p ^rptr[^char]
  len ^int
}

fn ststring(cs ^cstring) ^ststring {
  len := strlen(cs)
  s := init(^ststring) {
    alloc[^char](len+1)
    len
  }
  copy_memory(to_ptr(s.p), cast[^ptr[^char]](cs), len)
  unref(to_ptr(s.p) +! len) = char(0)
  s
}
fn string(len ^int) ^ststring {
  s := init(^ststring) {
    alloc[^char](len+1)
    len
  }
  unref(to_ptr(s.p) +! len) = char(0)
  s
}

fn `!(s ^ststring, i ^int) ^char $[importjs, patternjs "$1[$2]"] {
  unref(to_ptr(s.p) +! i)
}

macro sts(s ^fstrlit) ^fexpr $[syntax] {
  quote {
    ststring(`s)
  }
}

fn to_cs(s ^ststring) ^cstring $[importjs, patternjs "$1"] {
  cast[^cstring](to_ptr(s.p))
}

fn length(s ^ststring) ^int $[importjs, patternjs "$1.length"] {
  s.len
}

fn copy(s ^ststring) ^ststring {
  ststring(to_cs(s))
}

fn print(s ^ststring) $[importjs "console.log"] {
  print(cast[^cstring](to_ptr(s.p)))
}

fn `==(a ^ststring, b ^ststring) ^bool {
  to_cs(a) == to_cs(b)
}
