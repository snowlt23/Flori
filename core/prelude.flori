
type Void $[importc "void", header nodeclc]
type Bool $[importc "bool", header "stdbool.h"]
type CString $[importc "char*", header nodeclc]
type Char $[importc "char", header nodeclc]
type CInt $[importc "int", header "stdint.h"]
type Int $[importc "int64_t", header "stdint.h"]
type Int8 $[importc "int8_t", header "stdint.h"]
type Int32 $[importc "int32_t", header "stdint.h"]
type Int64 $[importc "int64_t", header "stdint.h"]
type UInt8 $[importc "uint8_t", header "stdint.h"]
type UInt32 $[importc "uint32_t", header "stdint.h"]
type UInt64 $[importc "uint64_t", header "stdint.h"]
type Float $[importc "float", header nodeclc]

fn `||(a Bool, b Bool) Bool $[importc "||", header nodeclc, pattern infixc]
fn `&&(a Bool, b Bool) Bool $[importc "&&", header nodeclc, pattern infixc]

fn `+(a Int, b Int) Int $[importc "+", header nodeclc, pattern infixc]
fn `+=(a Int, b Int) $[importc "+=", header nodeclc, pattern infixc]
fn `-=(a Int, b Int) $[importc "-=", header nodeclc, pattern infixc]
fn `-(a Int, b Int) Int $[importc "-", header nodeclc, pattern infixc]
fn `*(a Int, b Int) Int $[importc "*", header nodeclc, pattern infixc]
fn `<<(a Int, b Int) Int $[importc "<<", header nodeclc, pattern infixc]
fn `>>(a Int, b Int) Int $[importc ">>", header nodeclc, pattern infixc]
fn `<(a Int, b Int) Bool $[importc "<", header nodeclc, pattern infixc]
fn `<=(a Int, b Int) Bool $[importc "<=", header nodeclc, pattern infixc]
fn `>(a Int, b Int) Bool $[importc ">", header nodeclc, pattern infixc]
fn `>=(a Int, b Int) Bool $[importc ">=", header nodeclc, pattern infixc]
fn `==(a Int, b Int) Bool $[importc "==", header nodeclc, pattern infixc]
fn `!=(a Int, b Int) Bool $[importc "!=", header nodeclc, pattern infixc]

fn `==(a Char, b Char) Bool $[importc "==", header nodeclc, pattern infixc]
fn `!=(a Char, b Char) Bool $[importc "!=", header nodeclc, pattern infixc]

fn cast[T, F](val F) T $[importc, header nodeclc, pattern "((#1)($1))"]

fn `+=(a Float, b Float) $[importc "+=", header nodeclc, pattern infixc]
fn `-=(a Float, b Float) $[importc "-=", header nodeclc, pattern infixc]
fn `+(a Float, b Float) Float $[importc "+", header nodeclc, pattern infixc]
fn `-(a Float, b Float) Float $[importc "-", header nodeclc, pattern infixc]
fn `*(a Float, b Float) Float $[importc "*", header nodeclc, pattern infixc]
fn `/(a Float, b Float) Float $[importc "/", header nodeclc, pattern infixc]
fn `<(a Float, b Float) Bool $[importc "<", header nodeclc, pattern infixc]
fn `<=(a Float, b Float) Bool $[importc "<=", header nodeclc, pattern infixc]
fn `>(a Float, b Float) Bool $[importc ">", header nodeclc, pattern infixc]
fn `>=(a Float, b Float) Bool $[importc ">=", header nodeclc, pattern infixc]

fn `/(a Int, b Int) Float {
  cast[Float](a) / cast[Float](b)
}

fn `<<(a UInt32, b UInt32) UInt32 $[importc "<<", header nodeclc, pattern infixc]
fn `>>(a UInt32, b UInt32) UInt32 $[importc ">>", header nodeclc, pattern infixc]

fn uint32(x Int) UInt32 {
  cast[UInt32](x)
}
fn int(x UInt32) Int {
  cast[Int](x)
}
fn float(x Int) Float {
  cast[Float](x)
}
fn float(x UInt32) Float {
  cast[Float](x)
}

fn uint8(x Int) UInt8 {
  cast[UInt8](x)
}
fn int(x UInt8) Int {
  cast[Int](x)
}

true := cast[Bool](1)
false := cast[Bool](0)
fn not(b Bool) Bool {
  if (b) {
    false
  } else {
    true
  }
}

# string.h
fn strcmp(a CString, b CString) Int $[importc "strcmp", header "string.h"]
fn `==(a CString, b CString) Bool {
  if (strcmp(a, b) == 0) {
    true
  } else {
    false
  }
}
fn `!=(a CString, b CString) Bool {
  not(a == b)
}

# time.h
type Clock $[importc "clock_t", header "time.h"]
fn get_clock() Clock $[importc "clock", header "time.h"]
fn `+(a Clock, b Clock) Clock $[importc "+", header nodeclc, pattern infixc]
fn `-(a Clock, b Clock) Clock $[importc "-", header nodeclc, pattern infixc]
fn `/(a Clock, b Int) Float {
  cast[Float](a) / cast[Float](b)
}
