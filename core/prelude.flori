
;; Primitive Types

(c-type Int8 :name "int8_t" :header "stdint.h")
(c-type UInt8 :name "uint8_t" :header "stdint.h")
(c-type Int32 :name "int32_t" :header "stdint.h")
(c-type UInt32 :name "uint32_t" :header "stdint.h")
(c-type Int64 :name "int64_t" :header "stdint.h")
(c-type UInt64 :name "uint64_t" :header "stdint.h")
(c-type Float32 :name "float32_t" :header "stdint.h")
(c-type Float64 :name "float64_t" :header "stdint.h")
(c-type Size :name "size_t" :header "stdlib.h")

(c-type Bool :name "bool" :header "stdbool.h")

; C Types

(c-type CString :name "char*" :nodecl)
(c-type CInt :name "int" :nodecl)
(c-type CChar :name "char" :nodecl)
(c-type Void :name "void" :nodecl)

;; Protocols

(defprotocol All)

@(^ (:a All))
(defprotocol Number
  (+ (: :a :a -> :a)))

@(^ (:a All) (:b All))
(defprotocol Seqable
  (push (: :a :b))
  (nth (: :a Size -> :b))
  (len (: :a -> Size)))

;; Pointer Types

(c-type Pointer :name "void*" :nodecl)
@(^ (:a All))
(c-type (Ptr :a) :name "$1*" :nodecl)

;; Values

@(: Bool)
(c-value true :name "true")
@(: Bool)
(c-value false :name "false")

;; Ptr Functions

@(^ (:a All))
@(: :a -> Size)
(c-import sizeof :name "sizeof" :nodecl)

@(^ (:a All))
@(: :a -> (Ptr :a))
(c-import addr :name "&" :nodecl)

@(^ (:a All) (:b All))
@(: :a :b -> :a)
(c-import cast :pattern "(($1)$2)" :nodecl)

@(^ (:a All))
@(: (Ptr :a) Size -> :a)
(c-import nth :pattern "$1[$2]" :nodecl)

@(: Size)
(c-import alloc :name "malloc" :header "stdlib.h")
@(: Pointer)
(c-import realloc :name "realloc" :header "stdlib.h")
@(: Pointer)
(c-import dealloc :name "free" :header "stdlib.h")

@(: Pointer Pointer Size)
(c-import memcpy :name "memcpy" :header "string.h")

@(: CString -> CInt)
(c-import strlen :name "strlen" :header "string.h")

;; Functions

@(: Int32 Int32 -> Int32)
(c-import + :infix :nodecl)

@(: Int32 -> UInt32)
(defn uint32 [x]
  (cast UInt32 x))
@(: UInt32 UInt32 -> UInt32)
(c-import + :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-import - :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-import * :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-import / :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-import pow :name "^" :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-import << :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-import >> :infix :nodecl)

@(: Int64 Int64 -> Int64)
(c-import + :infix :nodecl)

@(: Float32 Float32 -> Float32)
(c-import + :infix :nodecl)

@(: Float64 Float64 -> Float64)
(c-import + :infix :nodecl)

@(: Int32 -> Size)
(defn size [x]
  (cast Size x))
@(: Size Size -> Size)
(c-import + :infix :nodecl)
@(: Size Size -> Size)
(c-import * :infix :nodecl)

@(: Int32 -> Int32)
(c-import abs :header "math.h")
