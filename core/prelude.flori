defprimitive void 0
defprimitive int 8
defprimitive cstring 8
defprimitive char 1
defprimitive u8 1
defprimitive u16 2
defprimitive u32 4
defprimitive pointer 8
defprimitive fmap 8
defprimitive bool 8

inline fn cast_int(p ^char) ^int {}

inline fn cast_int(p ^cstring) ^int {}
inline fn cast_ptr(p ^cstring) ^ptr char {}
inline fn cast_pointer(p ^cstring) ^pointer {}

inline fn cast_int(p ^pointer) ^int {}
inline fn cast_ptr_char(p ^pointer) ^ptr char {}
inline fn cast_ptr_int(p ^pointer) ^ptr int {}
inline fn cast_ptr_fmap(p ^pointer) ^ptr fmap {}
inline fn cast_cstring(p ^pointer) ^cstring {}

inline fn cast_cstring(p ^ptr char) ^cstring {}

inline fn cast_int(f ^fmap) ^int {}

inline fn cast_int(f ^ptr int) ^int {}

inline fn cast_char(x ^int) ^char {}
inline fn cast_cstring(x ^int) ^cstring {}
inline fn cast_pointer(x ^int) ^pointer {}
inline fn cast_fmap(x ^int) ^fmap {}

inline fn push_rax() {
  X(0x50)
}
inline fn push_rdx() {
  X(0x52)
}

inline fn pop_rax() {
  X(0x58)
}
inline fn pop_rcx() {
  X(0x59)
}
inline fn pop_rdx() {
  X(0x5a)
}
inline fn pop_rbp() {
  X(0x5d)
}
inline fn pop_rsi() {
  X(0x5e)
}
inline fn pop_rdi() {
  X(0x5f)
}
inline fn pop_r8() {
  X(0x41) X(0x58)
}
inline fn pop_r9() {
  X(0x41) X(0x59)
}
inline fn pop_r10() {
  X(0x41) X(0x5a)
}

inline fn cmp_rax_rcx() {
  X(0x48) X(0x39) X(0xC8)
}

inline fn op_call_rax() {
  X(0xff) X(0xd0)
}

inline fn opret() {
  X(0xc3)
}

inline fn genret() {
  pop_rax()
  X(0x48) X(0x89) X(0xec)
  pop_rbp()
  opret()
}
inline fn return(r ^int) {genret()}
inline fn return(r ^pointer) {genret()}
inline fn return(r ^char) {genret()}
inline fn return(r ^cstring) {genret()}
inline fn return(r ^bool) {genret()}
inline fn return(r ^fmap) {genret()}
inline fn return(r ^u16) {genret()}

inline fn genadd() {
  pop_rcx() pop_rax()
  X(0x48) X(0x01) X(0xC8)
  push_rax()
}
inline fn +(a ^int, b ^int) ^int {genadd()}
inline fn +(a ^pointer, b ^int) ^pointer {genadd()}
inline fn +(a ^cstring, b ^int) ^cstring {genadd()}
inline fn +(a ^ptr int, b ^int) ^ptr int {genadd()}
inline fn +(a ^ptr char, b ^int) ^ptr char {genadd()}
inline fn +(a ^ptr fmap, b ^int) ^ptr fmap {genadd()}

inline fn gensub() {
  pop_rcx() pop_rax()
  X(0x48) X(0x29) X(0xC8)
  push_rax()
}
inline fn -(a ^int, b ^int) ^int {gensub()}
inline fn -(a ^ptr int, b ^int) ^ptr int {gensub()}
inline fn -(a ^ptr char, b ^int) ^ptr char {gensub()}

inline fn genmul() {
  pop_rcx() pop_rax()
  X(0x48) X(0xf7) X(0xe1) # mul rcx
  push_rax()
}
inline fn *(a ^int, b ^int) ^int {genmul()}

inline fn gendiv() {
  pop_rcx() pop_rax()
  X(0x48) X(0xc7) X(0xc2) X(0x00) X(0x00) X(0x00) X(0x00) # mov rdx, 0
  X(0x48) X(0xf7) X(0xf9) # idiv rcx
  push_rax()
}
inline fn /(a ^int, b ^int) ^int {gendiv()}

inline fn genmod() {
  pop_rcx() pop_rax()
  X(0x48) X(0xc7) X(0xc2) X(0x00) X(0x00) X(0x00) X(0x00) # mov rdx, 0
  X(0x48) X(0xf7) X(0xf9) # idiv rcx
  push_rdx()
}
inline fn mod(a ^int, b ^int) ^int {genmod()}

inline fn genshl() {
  pop_rcx() pop_rax()
  X(0x48) X(0xd3) X(0xe0) # shl rax, cl
  push_rax()
}
inline fn <<(a ^int, b ^int) ^int {genshl()}
inline fn <<(a ^u16, b ^int) ^u16 {
  pop_rcx() pop_rax()
  X(0x66) X(0xd3) X(0xe0) # shl ax, cl
  X(0x48) X(0x0f) X(0xb7) X(0xc0) # movzx rax, ax
  push_rax()
}

inline fn genshr() {
  pop_rcx() pop_rax()
  X(0x48) X(0xd3) X(0xe8) # shr rax, cl
  push_rax()
}
inline fn >>(a ^int, b ^int) ^int {genshr()}
inline fn >>(a ^u16, b ^int) ^u16 {
  pop_rcx() pop_rax()
  X(0x66) X(0xd3) X(0xe8) # shr ax, cl
  X(0x48) X(0x0f) X(0xb7) X(0xc0) # movzx rax, ax
  push_rax()
}

inline fn genor() {
  pop_rcx() pop_rax()
  X(0x48) X(0x09) X(0xc8) # or rax, rcx
  push_rax()
}
inline fn |(a ^int, b ^int) ^int {genor()}
inline fn |(a ^u16, b ^u16) ^u16 {
  pop_rcx() pop_rax()
  X(0x66) X(0x09) X(0xc8) # or ax, cx
  push_rax()
}

inline fn genand() {
  pop_rcx() pop_rax()
  X(0x66) X(0x21) X(0xc8) # and ax, cx
  push_rax()
}
inline fn and(a ^int, b ^int) ^int {genand()}
inline fn and(a ^u16, b ^int) ^u16 {genand()}

inline fn <(a ^int, b ^int) ^bool {
  pop_rcx() pop_rax()
  cmp_rax_rcx()
  X(0x48) X(0xc7) X(0xc0) X(0x00) X(0x00) X(0x00) X(0x00)
  X(0x0F) X(0x9C) X(0xC0)
  push_rax()
}

inline fn geneq() {
  pop_rcx() pop_rax()
  cmp_rax_rcx()
  X(0x48) X(0xc7) X(0xc0) X(0x00) X(0x00) X(0x00) X(0x00) # mov rax, 0
  X(0x0F) X(0x94) X(0xC0) # sete al
  push_rax()
}
inline fn ==(^int, ^int) ^bool geneq()
inline fn ==(^char, ^char) ^bool geneq()

fn true() ^bool {
  return 1
}
fn false() ^bool {
  return 0
}

inline fn *(p ^ptr int) ^int {
  pop_rax()
  X(0x48) X(0x8b) X(0x00)
  push_rax()
}
inline fn *=(p ^ptr int, v ^int) {
  pop_rcx() pop_rax()
  X(0x48) X(0x89) X(0x08)
}
inline fn *lvalue(p ^ptr int) ^ptr int {}

inline fn *(p ^ptr pointer) ^pointer {
  pop_rax()
  X(0x48) X(0x8b) X(0x00)
  push_rax()
}
inline fn *=(p ^ptr pointer, v ^pointer) {
  pop_rcx() pop_rax()
  X(0x48) X(0x89) X(0x08)
}
inline fn *lvalue(p ^ptr pointer) ^ptr pointer {}

inline fn *(p ^ptr ptr fmap) ^ptr fmap {
  pop_rax()
  X(0x48) X(0x8b) X(0x00)
  push_rax()
}
inline fn *=(p ^ptr ptr fmap, v ^ptr fmap) {
  pop_rcx() pop_rax()
  X(0x48) X(0x89) X(0x08)
}
inline fn *lvalue(p ^ptr ptr fmap) ^ptr ptr fmap {}

inline fn *(p ^ptr cstring) ^cstring {
  pop_rax()
  X(0x48) X(0x8b) X(0x00)
  push_rax()
}
inline fn *=(p ^ptr cstring, v ^cstring) {
  pop_rcx() pop_rax()
  X(0x48) X(0x89) X(0x08)
}

inline fn *(p ^ptr fmap) ^fmap {
  pop_rax()
  X(0x48) X(0x8b) X(0x00)
  push_rax()
}
inline fn *=(p ^ptr fmap, v ^fmap) {
  pop_rcx() pop_rax()
  X(0x48) X(0x89) X(0x08)
}

inline fn *=(p ^ptr ptr int, v ^ptr int) {
  pop_rcx() pop_rax()
  X(0x48) X(0x89) X(0x08)
}
inline fn *=(p ^ptr ptr char, v ^ptr char) {
  pop_rcx() pop_rax()
  X(0x48) X(0x89) X(0x08)
}

inline fn *(^ptr char) ^char {
  pop_rax()
  X(0x8a) X(0x00) # mov al, [rax]
  X(0x48) X(0x0f) X(0xb6) X(0xc0) # movzx rax, al
  push_rax()
}
inline fn *=(p ^ptr char, v ^char) {
  pop_rcx() pop_rax()
  X(0x88) X(0x08)
}
inline fn *lvalue(^ptr char) ^ptr char {}

inline fn *(^ptr u8) ^u8 {
  pop_rax()
  X(0x8a) X(0x00) # mov al, [rax]
  X(0x48) X(0x0f) X(0xb6) X(0xc0) # movzx rax, al
  push_rax()
}
inline fn *=(p ^ptr u8, v ^u8) {
  pop_rcx() pop_rax()
  X(0x88) X(0x08)
}
inline fn *lvalue(^ptr u8) ^ptr u8 {}

inline fn *(^ptr u16) ^u16 {
  pop_rax()
  X(0x66) X(0x8b) X(0x00) # mov ax, [rax]
  X(0x48) X(0x0f) X(0xb7) X(0xc0) # movzx rax, ax
  push_rax()
}
inline fn *=(p ^ptr u16, v ^u16) {
  pop_rcx() pop_rax()
  X(0x66) X(0x89) X(0x08)
}
inline fn *lvalue(^ptr u16) ^ptr u16 {}

inline fn *(p ^ptr u32) ^u32 {
  pop_rax()
  X(0x8b) X(0x00)
  push_rax()
}
inline fn *=(p ^ptr u32, v ^u32) {
  pop_rcx() pop_rax()
  X(0x89) X(0x08)
}
inline fn *lvalue(p ^ptr u32) ^ptr u32 {}

inline fn op_syscall() {
  X(0x0f) X(0x05)
}

inline fn syscall(n ^int, a1 ^int) ^int {
  pop_rdi() pop_rax()
  op_syscall() push_rax()
}
inline fn syscall(n ^int, a1 ^int, a2 ^int) ^int {
  pop_rsi() pop_rdi() pop_rax()
  op_syscall() push_rax()
}
inline fn syscall(n ^int, a1 ^int, a2 ^int, a3 ^int) ^int {
  pop_rdx() pop_rsi() pop_rdi() pop_rax()
  op_syscall() push_rax()
}
inline fn syscall(n ^int, a1 ^int, a2 ^int, a3 ^int, a4 ^int, a5 ^int) ^int {
  pop_r8() pop_r10() pop_rdx() pop_rsi() pop_rdi() pop_rax()
  op_syscall() push_rax()
}
inline fn syscall(n ^int, a1 ^int, a2 ^int, a3 ^int, a4 ^int, a5 ^int, a6 ^int) ^int {
  pop_r9() pop_r8() pop_r10() pop_rdx() pop_rsi() pop_rdi() pop_rax()
  op_syscall() push_rax()
}

inline fn cffi(p ^pointer) ^int {
  pop_rax()
  op_call_rax() push_rax()
}
inline fn cffi(p ^pointer, a1 ^int) ^int {
  pop_rdi() pop_rax()
  op_call_rax() push_rax()
}
inline fn cffi(p ^pointer, a1 ^int, a2 ^int) ^int {
  pop_rsi() pop_rdi() pop_rax()
  op_call_rax() push_rax()
}
inline fn cffi(p ^pointer, a1 ^int, a2 ^int, a3 ^int) ^int {
  pop_rdx() pop_rsi() pop_rdi() pop_rax()
  op_call_rax() push_rax()
}

fn exit(retcode ^int) {
  syscall(60, retcode)
}

fn sys_print(s ^cstring, len ^int) ^int {
  syscall(1, 1, cast_int(s), len)
}
fn sys_error_print(s ^cstring, len ^int) ^int {
  syscall(1, 2, cast_int(s), len)
}

internal_init_defs()

fn internal_print(x ^int) {
  cffi(internal_print_ptr, x)
}

inline fn cast_u8(x ^int) ^u8 {}
inline fn cast_u16(x ^int) ^u16 {
  
}
inline fn cast_u32(x ^int) ^u32 {}

inline fn cast_int(p ^u8) ^int {}
inline fn cast_int(p ^u16) ^int {}
inline fn cast_int(p ^u32) ^int {}
inline fn cast_int(p ^ptr u32) ^int {}