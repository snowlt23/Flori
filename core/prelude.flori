defprimitive void 0
defprimitive int 8
defprimitive cstring 8
defprimitive char 1
defprimitive pointer 8
defprimitive fexpr 8

jit return(^int) ^int {
  X 0x58                 # pop rax
  X 0x48; X 0x89; X 0xEC # mov rsp, rbp
  X 0x5D                 # pop rbp
  X 0xC3                 # ret
}

jit return(^fexpr) ^fexpr {
  X 0x58                 # pop rax
  X 0x48; X 0x89; X 0xEC # mov rsp, rbp
  X 0x5D                 # pop rbp
  X 0xC3                 # ret
}

jit return(^cstring) ^cstring {
  X 0x58                 # pop rax
  X 0x48; X 0x89; X 0xEC # mov rsp, rbp
  X 0x5D                 # pop rbp
  X 0xC3                 # ret
}

jit add(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x01; X 0xC8
  X 0x50
}

jit +(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x01; X 0xC8
  X 0x50
}

jit +(^ptr int, ^ptr int) ^ptr int {
  X 0x59
  X 0x58
  X 0x48; X 0x01; X 0xC8
  X 0x50
}

jit +(^ptr char, ^int) ^ptr char {
  X 0x59
  X 0x58
  X 0x48; X 0x01; X 0xC8
  X 0x50
}

jit -(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x29; X 0xC8
  X 0x50
}

jit <(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x39; X 0xC8
  X 0x0F; X 0x9C; X 0xC0
  X 0x0F; X 0xB6; X 0xC0
  X 0x50
}

jit ==(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x39; X 0xC8
  X 0x48; X 0xc7; X 0xc0; X 0x00; X 0x00; X 0x00; X 0x00
  X 0x0F; X 0x94; X 0xC0
  X 0x50
}

jit ==(^char, ^char) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x39; X 0xC8
  X 0x48; X 0xc7; X 0xc0; X 0x00; X 0x00; X 0x00; X 0x00
  X 0x0F; X 0x94; X 0xC0
  X 0x50
}

fn not(b ^int) ^int {
  if b {return 0} else {return 1}
}

jit and(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x21; X 0xC8
  X 0x50
}

jit or(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x09; X 0xC8
  X 0x50
}

jit shl(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0xd3; X 0xe0
  X 0x50
}

jit shr(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0xd3; X 0xe8
  X 0x50
}

jit deref(^ptr int) ^int {
  X 0x58
  X 0x48; X 0x8b; X 0x00
  X 0x50
}
jit deref_lvalue(^ptr int) ^ptr int {}

jit deref(^ptr cstring) ^cstring {
  X 0x58
  X 0x48; X 0x8b; X 0x00
  X 0x50
}
jit deref_lvalue(^ptr cstring) ^ptr cstring {}

jit deref(^ptr char) ^char {
  X 0x58
  X 0x8a; X 0x00
  X 0x48; X 0x0f; X 0xb6; X 0xc0
  X 0x50
}
jit deref_lvalue(^ptr char) ^ptr char {}

jit cast_ptr(^cstring) ^ptr char {}
jit cast_ptr_int(^pointer) ^ptr int {}
jit cast_pointer(^cstring) ^pointer {}
jit cstring(^pointer) ^cstring {}
jit cast_cstring(^int) ^cstring {}
jit cast_int(^cstring) ^int {}
jit cast_int(^char) ^int {}
jit cast_int(^ptr int) ^int {}
jit cast_int(^fexpr) ^int {}
jit cast_fexpr(^int) ^fexpr {}
jit cast_char(^int) ^char {}
jit char_ptr(^pointer) ^ptr char {}

fn copy(p ^ptr int, v ^int) {
  (deref p) = v
}
fn copy(p ^ptr cstring, v ^cstring) {
  (deref p) = v
}

jit push_rax() ^void {
  X 0x50
}

jit pop_rax() ^void {
  X 0x58
}
jit pop_rcx() ^void {
  X 0x59
}
jit pop_rdi() ^void {
  X 0x5f
}
jit pop_rsi() ^void {
  X 0x5e
}
jit pop_rdx() ^void {
  X 0x5a
}

jit op_syscall() ^void {
  X 0x0f; X 0x05
}

jit op_call_rax() ^void {
  X 0xff; X 0xd0
}

jit syscall(^int, ^int) ^int {
  pop_rdi; pop_rax
  op_syscall; push_rax
}
jit syscall(^int, ^int, ^int) ^int {
  pop_rsi; pop_rdi; pop_rax
  op_syscall; push_rax
}
jit syscall(^int, ^int, ^int, ^int) ^int {
  pop_rdx; pop_rsi; pop_rdi; pop_rax
  op_syscall; push_rax
}

jit cffi(^pointer) ^int {
  pop_rax
  op_call_rax; push_rax
}
jit cffi(^pointer, ^int) ^int {
  pop_rdi; pop_rax
  op_call_rax; push_rax
}
jit cffi(^pointer, ^int, ^int) ^int {
  pop_rsi; pop_rdi; pop_rax
  op_call_rax; push_rax
}

fn exit(retcode ^int) {
  syscall 60 retcode
}

fn sys_print(s ^cstring, len ^int) ^int {
  syscall 1 1 (cast_int s) len
}
fn sys_eprint(s ^cstring, len ^int) ^int {
  syscall 1 2 (cast_int s) len
}

internal_init_defs

fn internal_print(x ^int) {
  cffi internal_print_ptr x
}