defprimitive void 0
defprimitive int 8
defprimitive cstring 8
defprimitive char 1

jit return(^int) ^int {
  X 0x58
  X 0x48; X 0x89; X 0xEC
  X 0x5D
  X 0xC3
}

jit add(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x01; X 0xC8
  X 0x50
}

jit +(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x01; X 0xC8
  X 0x50
}

jit +(^ptr int, ^ptr int) ^ptr int {
  X 0x59
  X 0x58
  X 0x48; X 0x01; X 0xC8
  X 0x50
}

jit -(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x29; X 0xC8
  X 0x50
}

jit <(^int, ^int) ^int {
  X 0x59
  X 0x58
  X 0x48; X 0x39; X 0xC8
  X 0x0F; X 0x9C; X 0xC0
  X 0x0F; X 0xB6; X 0xC0
  X 0x50
}

jit deref(^ptr int) ^int {
  X 0x58
  X 0x48; X 0x8b; X 0x00
  X 0x50
}
jit deref_lvalue(^ptr int) ^ptr int {}

jit deref(^ptr char) ^char {
  X 0x58
  X 0x8a; X 0x00
  X 0x48; X 0x0f; X 0xb6; X 0xc0
  X 0x50
}
jit deref_lvalue(^ptr char) ^ptr char {}

jit cast_ptr(^cstring) ^ptr char {}
jit cast_int(^cstring) ^int {}
jit cast_int(^ptr int) ^int {}

fn copy(p ^ptr int, v ^int) {
  (deref p) = v
}

jit push_rax() ^void {
  X 0x50
}

jit pop_rax() ^void {
  X 0x58
}
jit pop_rdi() ^void {
  X 0x5f
}
jit pop_rsi() ^void {
  X 0x5e
}
jit pop_rdx() ^void {
  X 0x5a
}

jit op_syscall() ^void {
  X 0x0f; X 0x05
}

jit syscall(^int, ^int) ^int {
  pop_rdi; pop_rax
  op_syscall; push_rax
}
jit syscall(^int, ^int, ^int) ^int {
  pop_rsi; pop_rdi; pop_rax
  op_syscall; push_rax
}
jit syscall(^int, ^int, ^int, ^int) ^int {
  pop_rdx; pop_rsi; pop_rdi; pop_rax
  op_syscall; push_rax
}

fn exit(retcode ^int) {
  syscall 60 retcode
}

fn sys_print(s ^cstring, len ^int) ^int {
  syscall 1 1 (cast_int s) len
}

fn brk(addr ^int) {
  syscall 12 addr
}

sbrk_curaddr := 0
fn sbrk() {
}