
;; Primitive Types

(c-type Int8 :name "int8_t" :header "stdint.h")
(c-type UInt8 :name "uint8_t" :header "stdint.h")
(c-type Int32 :name "int32_t" :header "stdint.h")
(c-type UInt32 :name "uint32_t" :header "stdint.h")
(c-type Int64 :name "int64_t" :header "stdint.h")
(c-type UInt64 :name "uint64_t" :header "stdint.h")
(c-type Float32 :name "float32_t" :header "stdint.h")
(c-type Float64 :name "float64_t" :header "stdint.h")
(c-type Size :name "size_t" :header "stdlib.h")

(c-type Bool :name "bool" :header "stdbool.h")

; C Types

(c-type CString :name "char*" :nodecl)
(c-type CInt :name "int" :nodecl)
(c-type CChar :name "char" :nodecl)
(c-type Void :name "void" :nodecl)

;; Protocols

(defprotocol All)

@(^ (:a All))
(defprotocol Destructable
  (destructor (: :a)))

@(^ (:a All))
(defprotocol Number
  (+ (: :a :a -> :a)))

@(^ (:a All) (:b All))
(defprotocol Seqable
  (push (: :a :b))
  (nth (: :a Size -> :b))
  (len (: :a -> Size)))

;; Pointer Types

(c-type UnsafePointer :name "void*" :nodecl)
(c-type UnsafePtr :param [:a] :name "$1*" :nodecl)

(defstruct Ptr [:a]
  (p (UnsafePtr :a)))

@(: :a -> (Ptr :a))
(defn new-ptr [value]
  (alloc ()))
@(: (Typedesc :a) Int32 -> (Ptr :a))
(defn new-ptr-array [len]
  (Ptr. (alloc (* (sizeof :a) len))))
@(: (Ptr :a))
(defn destructor [p]
  (dealloc (.p p)))

;; Values

@(: Bool)
(c-value true :name "true")
@(: Bool)
(c-value false :name "false")

;; Ptr Functions

@(^ (:a All))
@(: :a -> Size)
(c-func sizeof :name "sizeof" :nodecl)

@(^ (:a All))
@(: :a -> (Ptr :a))
(c-func addr :name "&" :nodecl)

@(^ (:a All) (:b All))
@(: :a :b -> :a)
(c-func cast :pattern "(($1)$2)" :nodecl)

@(^ (:a All))
@(: (Ptr :a) Size -> :a)
(c-func nth :pattern "$1[$2]" :nodecl)

@(: Size -> Pointer)
(c-func alloc :name "malloc" :header "stdlib.h")
@(: Pointer Size)
(c-func realloc :name "realloc" :header "stdlib.h")
@(: Pointer)
(c-func dealloc :name "free" :header "stdlib.h")

@(: Pointer Pointer Size)
(c-func memcpy :name "memcpy" :header "string.h")

@(: CString -> CInt)
(c-func strlen :name "strlen" :header "string.h")

;; Bool functions

@(: Bool -> Bool)
(c-func not :name "!" :nodecl)
@(: (Varargs Bool) -> Bool)
(c-func and :name "&&" :infix :nodecl)
@(: (Varargs Bool) -> Bool)
(c-func or :name "||" :infix :nodecl)
@(: Bool Bool -> Bool)
(c-func eq? :name "==" :nodecl)

;; Math operators

@(: Int32 Int32 -> Int32)
(c-func + :infix :nodecl)
@(: Int32 Int32 -> Int32)
(c-func - :infix :nodecl)
@(: Int32 Int32 -> Int32)
(c-func * :infix :nodecl)
@(: Int32 Int32 -> Int32)
(c-func / :infix :nodecl)
@(: Int32 Int32 -> Int32)
(c-func pow :name "^" :infix :nodecl)
@(: Int32 Int32 -> Int32)
(c-func << :infix :nodecl)
@(: Int32 Int32 -> Int32)
(c-func >> :infix :nodecl)
@(: Int32 Int32 -> Bool)
(c-func eq? :name "==" :infix :nodecl)
@(: Int32 Int32 -> Bool)
(c-func < :infix :nodecl)
@(: Int32 Int32 -> Bool)
(c-func > :infix :nodecl)
@(: Int32 Int32 -> Bool)
(c-func <= :infix :nodecl)
@(: Int32 Int32 -> Bool)
(c-func >= :infix :nodecl)

@(: Int32 -> UInt32)
(defn uint32 [x]
  (cast UInt32 x))
@(: UInt32 UInt32 -> UInt32)
(c-func + :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-func - :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-func * :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-func / :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-func pow :name "^" :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-func << :infix :nodecl)
@(: UInt32 UInt32 -> UInt32)
(c-func >> :infix :nodecl)
@(: UInt32 UInt32 -> Bool)
(c-func eq? :name "==" :infix :nodecl)

@(: Int64 Int64 -> Int64)
(c-func + :infix :nodecl)

@(: Float32 Float32 -> Float32)
(c-func + :infix :nodecl)

@(: Float64 Float64 -> Float64)
(c-func + :infix :nodecl)

@(: Int32 -> Size)
(defn size [x]
  (cast Size x))
@(: Size Size -> Size)
(c-func + :infix :nodecl)
@(: Size Size -> Size)
(c-func * :infix :nodecl)
@(: Size Size -> Bool)
(c-func < :infix :nodecl)
@(: Size Size -> Bool)
(c-func > :infix :nodecl)
@(: Size Size -> Bool)
(c-func <= :infix :nodecl)
@(: Size Size -> Bool)
(c-func >= :infix :nodecl)
@(: Size)
(defn destructor [x])

@(: Int32 -> Int32)
(c-func abs :header "math.h")
