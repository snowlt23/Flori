
import "core"
import "core/pointer"
when (is_windows) {
  import "std/windows"
} else {
  type TimeVal $[importc "struct timeval", header "sys/time.h"] {
    tv_sec Int
    tv_usec Int
  }
  fn gettimeofday(tv ref TimeVal, p Pointer) $[importc, header "sys/time.h"]
}


when (is_windows) {
  var freq WinTime
  win_query_performance_frequency(getptr(freq))
}
fn get_current_milliseconds() Double {
  when (is_windows) {
    var counter WinTime
    win_query_performance_counter(getptr(counter))
    (cast[Double](counter.QuadPart) * 1000.0) / double(freq.QuadPart)
  } else {
    var tv TimeVal
    gettimeofday(tv, null)
    cast[Double](tv.tv_sec) + cast[Double](tv.tv_usec)/1000000.0
  }
}

macro bench(body FBlock) FExpr $[syntax] {
  tmp := gensym()
  quote {
    `tmp := get_current_milliseconds()
    `body
    println("Elapsed: ", get_current_milliseconds() - `tmp, "ms")
  }
}
