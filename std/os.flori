
import "core"
import "core/syntax"
import "core/pointer"
import "std/env"

when (is_windows) {
  import "std/windows"
}

fn sleep(msec Int) {
  when (is_windows) {
    win_sleep(msec)
  }
}

fn get_argc() Int $[importc, patternc "gArgc"]
fn get_argv() Ptr[CString] $[importc, patternc "gArgv"]

fn get_commandline() String {
  when (is_windows) {
    string(win_getcommandline())
  } else {
    s := s""
    argc := get_argc()
    argv := get_argv()
    for (i : range(0, argc-1)) {
      push(s, argv!i)
      push(s, " ")
    }
    s
  }
}

fn get_param(index Int) CString {
  if (get_argc() <= index) {
    cast[CString](0)
  } else {
    get_argv()!index
  }
}

fn rand() Int  $[importc "rand", header "stdlib.h"]

fn get_rand_max() Int $[importc, header "stdlib.h", patternc "RAND_MAX"]
RAND_MAX := get_rand_max()

fn exit(x Int) $[importc "exit", header "stdlib.h"]
