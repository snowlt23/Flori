
import "core"
import "core/pointer"
import "std/env"

when (is_windows) {
  import "std/windows"
}

type File $[importc "FILE*", header "stdio.h"]

fn SEEK_END() Int $[importc, header "stdio.h", patternc "SEEK_END"]
SEEK_END := SEEK_END()
fn SEEK_SET() Int $[importc, header "stdio.h", patternc "SEEK_SET"]
SEEK_SET := SEEK_SET()

fn fprintf(f File, cs CString) $[importc "fprintf", header "stdio.h"]
fn fopen(name CString, mode CString) File $[importc "fopen", header "stdio.h"]
fn fgetc(f File) Char $[importc "fgetc", header "stdio.h"]
fn fputc(c Char, f File) $[importc "fputc", header "stdio.h"]
fn fclose(f File) $[importc "fclose", header "stdio.h"]
fn fseek(f File, pos Int, flag Int) $[importc "fseek", header "stdio.h"]
fn ftell(f File) Int $[importc "ftell", header "stdio.h"]
fn fread(cs CString, x Int, size Int, f File) Int $[importc "fread", header "stdio.h"]

when (not(is_windows)) {
  fn remove(path CString) Bool $[importc "remove", header "stdio.h"]
}

fn stdin() File $[importc, header "stdio.h", patternc "stdin"]
fn stdout() File $[importc, header "stdio.h", patternc "stdout"]

EOF := cast[Char](-1)

fn write(f File, cs CString) {
  fprintf(f, cs)
}
fn write(f File, s String) {
  fprintf(f, to_cs(s))
}

fn open_file(filename CString, mode CString) File {
  fopen(filename, mode)
}
fn close_file(f File) {
  fclose(f)
}

fn write_file(filename CString, s CString) {
  f := open_file(filename, "w")
  write(f, s)
  close_file(f)
}

fn read_file(filename CString) String {
  f := open_file(filename, "r")
  fseek(f, 0, SEEK_END)
  size := ftell(f)
  fseek(f, 0, SEEK_SET)
  ret := string(size)
  fread(to_cs(ret), 1, size, f)
  ret
}

fn copy_file(src CString, dest CString) Bool {
  when (is_windows) {
    win_copyfile(src, dest, false)
  } else {
    srcf := open_file(src, "r")
    dstf := open_file(src, "w")
    if (cast[Pointer](srcf) == null) {
      false
    } else {
      c := fgetc(srcf)
      while (c != EOF) {
        fputc(c, dstf)
      }
      true
    }
  }
}

fn create_dir(path CString) Bool {
  when (is_windows) {
    win_createdir(path, null)
  } else {
    # TODO:
    true
  }
}

fn delete_file(path CString) Bool {
  when (is_windows) {
    win_deletefile(path)
  } else {
    remove(path)
  }
}

macro static_read_file(filename FStrLit) FExpr {
  s := replace(to_cs(read_file(strval(filename))), lf, "\\n")
  new_fstrlit(to_cs(s))
}
