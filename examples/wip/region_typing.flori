
import "core"

type Vec[T] {
  p WPtr[T]
}

fn vec[T]() {
  init(Vec[T]){alloc_with[T]()} # <- HR
}

fn chg(a ref RPtr[Int]) { # <- R?
  a = alloc[Int]() # <- a-R <= HR
}
fn chg2(a ref RPtr[Int], b RPtr[Int]) { # <- R?, R?
  a = b # <- a-R <= b-R
}

fn new_int() RPtr[Int] {
  alloc[Int]() # <- HR
}

fn main() {
  a := alloc[Int]() # <- HR
  in_region { # R1
    x := alloc[Int]() # <- R1
    y := new_int() # <- R1
    a = y # illegal
    chg(x) # correct
    chg(a) # illegal
  }
}
main()

fn main() {
  n := read_int()
  v := vec[Int]()
  for (i : range(0, n-1)) { 
    push(v, i)
  }
}

