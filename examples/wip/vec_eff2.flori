
type Vec[T] {
  p Ptr[T]
  len Int
}

fn push[T](v ref Vec[T], value T) {
  track(v <-> value)
  ...
}

fn access[T](v Vec[T], i Int) T {
  track(return -> v)
  ...
}

fn file_eff() File {
  v := vec[File]()
  for (i, range(1, 10)) {
    f := open_file("test" & string(i) & ".txt")
    push(v, f)
  }
  sort(v)
  return access(v, 0)
}

fn file_get() {
  f := file_eff()
  return f
}

fn file_main() {
  f := file_get()
  println(read_line(f))
}

file_main()

#
# expanded
#

file_eff_v := uninit[Vec[File]]()

fn file_eff() File {
  file_eff_v = vec[File]()
  for (i, range(1, 10)) {
    f := open_file("test" & string(i) & ".txt")
    push(file_eff_v, f)
    track(f <-> vec_eff_v) # expand
  }
  sort(file_eff_v)
  return access(file_eff_v, 0)
  track(return -> v) # expand
}

fn file_get() {
  f := file_eff()
  return f
}

fn file_main() {
  f := file_get()
  println(read_line(f))
  destructor(file_eff_v);
}