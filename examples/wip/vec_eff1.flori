
type Vec[T] {
  p Ptr[T]
  len Int
}

fn push[T](v ref Vec[T], value T) {
  track(v -> value)
  ...
}

fn access[T](v Vec[T], i Int) T {
  track(return -> v)
  ...
}

fn vec_eff() Vec[File] {
  v := vec[File]()
  for (i, range(1, 10)) {
    f := open_file("test" & to_s(i) & ".txt")
    push(v, f)
  }
  return v
}

fn vec_main() {
  v := vec_eff()
}

vec_main()

#
# expanded
#

fn vec_eff() Vec[File] {
  v := vec[File]()
  for (i, range(1, 10)) {
    f := open_file("test" & to_s(i) & ".txt")
    push(v, f)
    track(v -> f) # expand
  }
  return v
}

fn vec_main() {
  v := vec_eff()
  destructor(v) # expand
}
