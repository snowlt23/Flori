
type Vec[T] {
  p Ptr[T]
  len Int
}

fn push[T](v ref Vec[T], value T) {
  track(v -> value)
}

fn get[T](v Vec[T], i Int) T {
  
}

#
# eff
#

fn vec_eff() Vec[File] {
  v := vec[File]()
  f := open_file("") # f.ctrc = 1
  push(v, f) # f.ctrc = 2
  return v # v.ctrc = 1, f.ctrc = 1
}

fn main() {
  v := vec_eff()
}

#
# expanded
#

fn vec_eff(result1 ref Vec[File], result2 ref File) {
  v := vec[File]()
  f := open_file("")
  
  push(v, f)
  track(v -> f)
  
  result1 = v
  result2 = f
}

fn main() {
  v := uninit[Vec[File]]()
  tmp_result2 := uninit[File]()
  
  vec_eff(v, tmp_result2)
  track(v -> tmp_result2)
  
  destructor(v)
  destructor(tmp_result2)
}
