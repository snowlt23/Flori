
(defprotocol All)

(defprotocol Num [:a]
  (+ (: (Varargs :a)))
  (- (: (Varargs :a))))
  
(defprotocol ToStr [:a]
  (str (: :a -> String)))

(defprotocol Eq [:a]
  (eq? (: :a :a -> Bool)))

@(hook Eq)
(defmacro neq-hook [t]
  `(defn neq? [a b]
    (not (eq? a b))))

;; infer => @(^ (:a Num))
;; infer => @(Fn :a -> :a)
(defn add5 [x]
  (+ x 5))

;; infer => @(^ (:a ToStr))
;; infer => @(Fn :a -> String)
(defn add5 [s]
  (append (str s) "5"))

;; infer => @(Fn String -> String)
(defn add5 [s]
  (append x "5"))

(println (add5 4)) ; => 9
(println (add5 "x")) ; => x5
