
int => $class
  `+(a, b) => $internal("int_add")
  `-(a, b) => $internal("int_sub")
float => $class
  `+.(a, b) => $internal("float_add")
  `-.(a, b) => $internal("float_sub")

fib(n) =>
  if n<2:
    n
  else:
    fib(n-1) + fib(n-2)

vector(a) => $class(p: ptr a, cap: int, len: int)
  new_cap(cap) => vector.init(alloc(sizeof(a)*cap), cap, 0)
  new() => vector.new_cap(256)
  extend(self) =>
  push(self) =>
    self.extend()
    v.p!v.len = e
    v.len += 1

main =>
  v := vector(int).new()
  v.push(1)
  v.push(2)

`..(s, e) =>

iota(s, e) =>
  v := vector(int).new()
  for i in s..e:
    v.push(i)
  v

tostr(x) => $protocol

println(x) => $macro
  quote:
    print(tostr(`x))
    print("\n")

println(fib(38)) # ok
idprint(x) => println(x) # error
intprint(x: int) => println(x) # ok

