`+`(a: int, b: int) => $internal("int_add")
`+.`(a: float, b: float) => $internal("float_add")

fib(n) =>
  if n<2:
    n
  else:
    fib(n-1) + fib(n-2)

vector(a) => $module
  init(p, cap, len) => $struct(p: ptr a, cap: int, len: int)
  new_cap(cap) => vector(a).init(alloc(sizeof(a)*cap), cap, 0)
  new() => vector(a).new_cap(256)
  push(v, e) =>
    v.extend()
    v.p!v.len = e
    v.len += 1

main =>
  v := vector(int).new()
  v.push(1)
  v.push(2)

`..`(s, e) => ...

iota(s, e) =>
  v := vector(int).new()
  for i in s..e:
    v.push(i)
  v

int_tostring(x) => ...

println(x) => $macro
  quote:
    print(`typeof(x)`_tostring(x), "\n")

println(fib(38)) # ok
idprint(x) => println(x) # error, `x` type is undefined.
intprint(x: int) => println(x) # ok

