
import "core"
import "core/pointer"
import "std/os"

macro in_pool(p FExpr, body FBlock) FExpr $[syntax] {
  prevr := gensym()
  rettmp := gensym()
  quote {
    `prevr := g_current_region
    g_current_region = `p.r
    `rettmp := `body
    push(p.objects, `rettmp)
    `p.r = g_current_region
    g_current_region = `prevr
    `rettmp
  }
}

macro define_pool(poolname FIdent, newname FIdent, typename FIdent) FExpr {
  quote {
    type `poolname {
      r Region
      objects Vec[`typename]
    }
    fn `newname(size Int) EnemyPool {
      init(`poolname){new_region(size); vec[`typename]()}
    }
    fn get_object(p `poolname, i Int) ref `typename {
      p.objects!i
    }
    fn compaction(p ref `poolname) {
      p.r.current = int(0)
      oldobjs := p.objects
      p.objects.len = int(0)
      for (i : range(0, length(oldobjs)-1)) {
        obj := oldobjs!i
        if (islive(obj)) {
          in_pool(p) {
            copy(obj)
          }
        }
      }
    }
  }
}

type Enemy {
  islive Bool
  name String
}

fn new_enemy(name CString) Enemy {
  init(Enemy){true; string(name)}
}

fn copy(prev Enemy) Enemy {
  init(Enemy){true; string(to_cs(prev.name))}
}

fn islive(e Enemy) Bool {
  e.islive
}

define_pool(EnemyPool, new_enemy_pool, Enemy)

default_region_settings()

fn main() {
  p := new_enemy_pool(1024)
  i := 0
  while (true) {
    in_pool(p) {new_enemy(to_cs(s"Enemy" & to_s(i)))}
    println(get_object(p, 0).name)
    get_object(p, 0).islive = false
    compaction(p)
    println(p.r.current)
    sleep(100)
    i += 1
  }
}
main()
