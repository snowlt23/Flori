
(defprotocol Seqable [a All]
  (push (: Self a))
  (nth (: Self Size -> a))
  (len (: Self -> Size)))

(defstruct Vec [a]
  (data [Pointer a])
  (len Size))

@unsafe
@(: [Ptr a] -> a)
(defn nth [ptr])

@unsafe
@(: Size)
(c-import alloc :name "malloc" :header "stdlib.h")
@unsafe
@(: Pointer)
(c-import realloc :name "realloc" :header "stdlib.h")
@unsafe
@(: Pointer)
(c-import dealloc :name "free" :header "stdlib.h")

@(: Size -> [Vec a])
(defn new-vec [len]
  (unsafe
    (var vec (cast Vec (malloc (* (sizeof a) len))))
    (set! (vec .len) len)
    vec))
@(: [Vec a] a)
(defn push [vec value]
  (unsafe
    (realloc (vec .data) (* (sizeof a) (+ (vec .len) 1)))
    (set! (nth (vec .data) (vec .len)) value))
  (inc (vec .len)))
@(: [Vec a] -> Size)
(defn len [vec]
  (vec .len))
@(: [Vec a] Size -> a)
(defn nth [vec index]
  (nth (vec .data)) index)

@destructor
@(^ a) @(: [Vec a])
(defn destroy [vec]
  (unsafe
    (free (vec .data))))

(defextend [Vec a] [Seqable a])
