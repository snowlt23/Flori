
import "core"

type MyInt $[resource, nodestruct] {
  x Int
}
fn mi(x Int) MyInt {
  init(MyInt){x}
}
fn print(mi MyInt) {
  print("MyInt:")
  print(mi.x)
}
destructor(mi MyInt) {
  println("d:MyInt:", mi.x)
}

fn main() {
  v := v[MyInt](mi(1), mi(2), mi(3))
  # v := vec[MyInt]()
  # push(v, mi(1))
  # push(v, mi(2))
  # push(v, mi(3))
  println(v)
}

main()
