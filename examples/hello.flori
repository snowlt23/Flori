
(defprotocol All)

(c-type UInt8 :name "uint8_t" :header "stdint.h")
(c-type Int32 :name "int32_t" :header "stdint.h")
(c-type Int64 :name "int64_t" :header "stdint.h")
(c-type Float32 :name "float32_t" :header "stdint.h")
(c-type Float64 :name "float64_t" :header "stdint.h")
(c-type Bool :name "bool" :header "stdbool.h")
(c-type Size :name "size_t" :header "stdlib.h")
(c-type CString :name "char*" :nodecl)
(c-type CInt :name "int" :nodecl)
(c-type CChar :name "char" :nodecl)
(c-type Pointer :name "void*" :nodecl)
(c-type Void :name "void" :nodecl)
@(^ (:a All))
(c-type (Ptr :a) :name "$1*" :nodecl)

@(: Bool)
(c-value true :name "true")
@(: Bool)
(c-value false :name "false")

@(: Int32 Int32 -> Int32)
(c-import + :infix :nodecl)

@(: Int32 -> Int32)
(c-import abs :header "math.h")

@(^ (:a All))
@(: :a -> (Ptr :a))
(c-import addr :name "&" :nodecl)

@(^ (:a All) (:b All))
@(: :a :b -> :a)
(c-import cast :pattern "(($1)$2)" :nodecl)

@(: Int32 -> Size)
(defn size [x]
  (cast Size x))

@(^ (:a All))
@(: (Ptr :a) Size -> :a)
(c-import nth :pattern "$1[$2]" :nodecl)

@(^ (:a All))
(defprotocol Number
  (+ (: :a :a -> :a)))

@(^ (:a All))
@(: CString :a)
(c-import printf :name "printf" :header "stdio.h")
@(: CString)
(c-import print :name "printf" :header "stdio.h")

@(: Int32)
(defn print [x]
  (printf "%d" x))
@(: CChar)
(defn print [c]
  (printf "%c" c))

@(^ (:a Number))
@(: :a -> :a)
(defn mul2 [x]
  (+ x x))

@(: Int32 -> Int32)
(defn add5 [x]
  (var res (+ x 5))
  (abs res))

@(: Int32 Bool Bool -> Int32)
(defn abstrue [x b1 b2]
  (if b1
    (if b2
      (abs x)
      x)
    x))

(defstruct MyInt
  (x Int32)
  (y Int32)
  (z Int32))

@(: MyInt -> Int32)
(defn get-x [mi]
  (mi x))

(print (nth (cast (Ptr CChar) (addr "Hello Voiceroids!\n")) (size 6)))
(print "\n")
(print "Hello Yukari!")
(print "\n")
(print (mul2 5))
(print "\n")
;; (print (add5 4))
;; (print "\n")
