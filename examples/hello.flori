
(require prelude :refer :all)
(require io :refer :all)
(require string :refer :all)

@(^ (:a Number))
@(: :a -> :a)
(defn mul2 [x]
  (+ x x))

@(: Int32 -> Int32)
(defn add5 [x]
  (var res (+ x 5))
  (abs res))

@(: Int32 Bool Bool -> Int32)
(defn abstrue [x b1 b2]
  (if b1
    (if b2
      (abs x)
      x)
    x))

(defstruct MyInt
  (x Int32)
  (y Int32)
  (z Int32))

@(: MyInt -> Int32)
(defn get-x [mi]
  (mi .x))

(print (nth (cast (Ptr UInt8) (addr "Hello Voiceroids!\n")) (size 6)))
(print "\n")
(print "Hello Yukari!")
(print "\n")
(print (mul2 5))
(print "\n")
(print (str "Hello IA!"))
(print "\n")
;; (print (add5 4))
;; (print "\n")
