
import core/prelude
import core/io
import core/macros

macro for(fexpr FExpr) FExpr {
  if ((length(fexpr) < 3) || (length(access(fexpr, 1)) < 2)) {
    error(fexpr, "expect syntax: for (e, iter) {...}")
  }
  
  cond := access(fexpr, 1)
  expect(cond, FEXPR_LIST)
  elem := access(cond, 0)
  iter := access(cond, 1)
  expect(elem, FEXPR_IDENT)
  body := access(fexpr, 2)
  expect(body, FEXPR_BLOCK)

  push(iter, elem)
  push(iter, body)
  iter
}

macro range(fexpr FExpr) FExpr {
  if (length(fexpr) < 4) {
    error(fexpr, "expect syntax: range(s, e) i {...}")
  }
  args := access(fexpr, 1)
  if (length(args) < 2) {
    error(fexpr, "range: require 2 arguments")
  }
  start := access(args, 0)
  end := access(args, 1)
  elem := access(fexpr, 2)
  body := access(fexpr, 3)

  quote {
    `elem := `start
    while (`elem <= `end) {
      `body
      `elem += 1
    }
  }
}

for (i, range(1, 10)) {
  println(i)
}
