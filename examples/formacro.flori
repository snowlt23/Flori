
import core/prelude
import core/io
import core/macros

macro for(fexpr FExpr) FExpr {
  cond := access(fexpr, 1)
  expect(cond, FEXPR_LIST)
  elem := access(cond, 0)
  iter := access(cond, 1)
  expect(elem, FEXPR_IDENT)
  body := access(fexpr, 2)
  expect(body, FEXPR_BLOCK)
  
  push(iter, elem)
  push(iter, body)
  iter
}

macro range(fexpr FExpr) FExpr {
  args := access(fexpr, 1)
  start := access(args, 0)
  end := access(args, 1)
  elem := access(fexpr, 2)
  body := access(fexpr, 3)

  initexpr := new_fseq()
  push(initexpr, parse(":="))
  push(initexpr, elem)
  push(initexpr, start)
  
  loopexpr := new_fseq()
  push(loopexpr, parse("while"))
  condlist := new_flist()
  condexpr := new_fseq()
  push(condexpr, parse("<="))
  push(condexpr, elem)
  push(condexpr, end)
  push(condlist, condexpr)
  push(loopexpr, condlist)
  nextexpr := new_fseq()
  push(nextexpr, parse("+="))
  push(nextexpr, elem)
  push(nextexpr, parse("1"))
  push(body, nextexpr)
  push(loopexpr, body)
  
  retexpr := new_fblock()
  push(retexpr, initexpr)
  push(retexpr, loopexpr)
  println(retexpr)
  retexpr
}

for (i, range(1, 10)) {
  println(i)
}
