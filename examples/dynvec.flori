
import "core"
import "core/pointer"

type DynVec[T] {
  data Ptr[Dynamic[T]]
  cap Int
  len Int
}

fn dynvec[T](len Int, cap Int) DynVec[T] {
  v := init(DynVec[T]) {
    alloc[Dynamic[T]](cap)
    cap
    len
  }
  v
}
fn dynvec[T](len Int) DynVec[T] {
  dynvec[T](len, len * 2)
}
fn dynvec[T]() DynVec[T] {
  dynvec[T](0, 8)
}

fn extend[T](v ref DynVec[T]) {
  v.data = realloc(v.data, (v.cap)*2)
  v.cap = (v.cap)*2
}

fn push[T](v ref DynVec[T], value Dynamic[T]) {
  if (v.cap < (v.len+1)) {
    extend(v)
  }
  unref(v.data +! ((v.len) * sizeof[T]())) := value
  v.len += 1
}

fn push[T](v ref DynVec[T], value move T) {
  if (v.cap < (v.len+1)) {
    extend(v)
  }
  unref(v.data +! ((v.len) * sizeof[T]())) = new_dynamic(value)
  v.len += 1
}

fn length[T](v DynVec[T]) Int {
  v.len
}

fn get[T](v DynVec[T], i Int) Dynamic[T] {
  unref((v.data) +! (i * sizeof[T]()))
}
# fn dget[T](v DynVec[T], i Int) Dynamic[T] {
#   unref((v.data) +! (i * sizeof[T]()))
# }

iterator items[T](v TExpr[DynVec[T]]) {
  i := gensym()
  quote {
    for `i in range(0, length(`v)-1) {
      `element := get(`v, `i)
      `yield
    }
  }
}
# iterator ditems[T](v TExpr[DynVec[T]]) {
#   i := gensym()
#   quote {
#     for `i in range(0, length(`v)-1) {
#       `element := dget(`v, `i)
#       `yield
#     }
#   }
# }

destructor[T](v DynVec[T]) {
  for e in v {
    if (is_owned(e)) {
      destruct(e.value)
    }
  }
  dealloc(v.data)
  println("DynVec destroyed!")
}
