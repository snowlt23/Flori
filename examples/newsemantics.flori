
@(: Int32 Int32 -> Int32)
(c-func + :infix :nodecl)
@(: Int32)
(c-func print :infix :nodecl)

(defstruct Wrap [data])
(defstruct Box [data])

(deftype Some [data])
(deftype None)
(defunion Option [Some None])

(defn get [w]
  (.data w))
(defn get [opt]
  (match opt
    (Some (get opt))
    (None (panic "opt is none"))))
(defn print [w]
  (print (.data w)))

(defn + [a b]
  (Wrap. (+ (get a) (get b))))
(defn + [a b]
  (Box. (+ (get a) (get b))))

(print (+ (Wrap. 4) (Wrap. 5)))
