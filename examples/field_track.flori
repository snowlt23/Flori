
import "core"

type MyFieldType $[resource, nodestruct] {
  x Int
  y Int
}

destructor(mt MyFieldType) {
  println("MyFieldType(", mt.x, ", ", mt.y, ") destroyed!")
}

type MyType $[nodestruct] {
  mfx MyFieldType
  mfy MyFieldType
}

destructor(mt MyType) {
  destruct(mt.mfx)
  destruct(mt.mfy)
  println("MyType destroyed!")
}

fn new_mt() MyType {
  mfx := init(MyFieldType){1; 2}
  mfy := init(MyFieldType){3; 4}
  mt := init(MyType){mfx; mfy}
  mt
}

fn mt_update(mt ref MyType, newmfx MyFieldType) {
  mt.mfx = newmfx
}

fn main() {
  println("start!")
  mt := new_mt()
  newmfx := init(MyFieldType){5; 6}
  mt.mfx = newmfx
  println("end!")
}

main()
