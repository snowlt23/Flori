
(require prelude :refer :all)

(c-type File :name "FILE*" :header "stdio.h")
@(: File CString)
(c-import fprintf :header "stdio.h")
@(: CString CString -> File)
(c-import open :name "fopen" :header "stdio.h")
@(: File)
(c-import close :name "fclose" :header "stdio.h")

@(: File)
(defn destructor [file]
  (close file))

@(: File CString)
(defn write [file s]
  (fprintf file s))

@(: CString CString)
(defn write-file [filename s]
  (var file (open filename "w")) ; file.inc 1
  (var f file) ; file.inc 2
  (write f s)) ; file.inc 3 -> file.dec 2
  ; file.dec 1
  ; file.dec 0 -> (close file)

;; @(: File String Size)
;; (defn repeat-write-file [filename s n]
;;   (var file (open filename)); file.inc 1
;;   (var f file) ; file.inc 2
;;   (for i (countup 0 n)
;;     (write f s))) ; file.inc 3 -> file.dec 2
;;   ; file.dec 1
;;   ; file.dec 0 -> (close file)

(defstruct Logger
  (file File))

@(: Logger)
(defn destructor [logger]
  (close (logger file))) ; actually not needed

@(: File -> Logger)
(defn new-logger [file]
  (Logger :file file)) ; file.inc +1

@(: Logger CString)
(defn log [logger s]
  (write (logger file) s)) ; file.inc 2 -> file.inc 1

@(:)
(defn main []
  (var logger (new-logger (open "voiceroids.txt" "w"))) ; file.inc 1
  (log logger "Yukari\n")
  (log logger "Maki\n")
  (log logger "Akane\n")
  (log logger "Aoi\n")) ; file.inc 2 -> file.dec 1
  ; file.dec 0 (close (file logger))

(main)
